// Automatically generated by PRGA SimProj generator

`timescale 1ns/1ps
module {{ behav.name }}_tb_wrapper;

    localparam  bs_num_qwords       = {{ config.bs_num_qwords }},
                bs_last_bit_index   = {{ config.bs_last_bit_index }},
                magic_sop           = {{ config.magic_sop }};

    localparam  cfg_width           = {{ config.width }};

    // system control
    reg sys_clk, sys_rst;
    wire sys_success, sys_fail;

    // logging 
    reg             verbose;
    reg [0:256*8-1] waveform_dump;
    reg [31:0]      cycle_count, max_cycle_count;

    // testbench wires
    reg             tb_rst;

    // behavioral model wires
    {%- for name, port in iteritems(behav.ports) %}
    wire {% if port.low is not none %}[{{ port.high - 1 }}:{{ port.low }}] {% endif %}behav_{{ name }};
    {%- endfor %}

    // FPGA implementation wires
    {%- for name, port in iteritems(behav.ports) %}
        {%- if port.direction.name == 'output' %}
    wire {% if port.low is not none %}[{{ port.high - 1 }}:{{ port.low }}] {% endif %}impl_{{ name }};
        {%- endif %}
    {%- endfor %}

    // testbench
    {{ tb.name }} {% if tb.parameters %}#(
        {%- set comma0 = joiner(",") -%}
        {%- for k, v in iteritems(tb.parameters) %}
        {{ comma0() }}.{{ k }}({{ v }})
        {%- endfor %}
    ) {% endif %}host (
        .sys_clk(sys_clk)
        ,.sys_rst(tb_rst)
        ,.sys_success(sys_success)
        ,.sys_fail(sys_fail)
        ,.cycle_count(cycle_count)
        {%- for name, port in iteritems(behav.ports) %}
            {%- if port.direction.name == 'output' %}
        ,.{{ name }}(impl_{{ name }})
            {%- else %}
        ,.{{ name }}(behav_{{ port.name }})
            {%- endif %}
        {%- endfor %}
        );

`ifndef USE_POST_PAR_BEHAVIORAL_MODEL
    // behavioral model
    {{ behav.name }} {% if behav.parameters %}#(
        {%- set comma1 = joiner(",") -%}
        {%- for k, v in iteritems(behav.parameters) %}
        {{ comma1() }}.{{ k }}({{ v }})
        {%- endfor %}
    ) {% endif %}behav (
        {%- set comma2 = joiner(",") -%}
        {%- for name in behav.ports %}
        {{ comma2() }}.{{ name }}(behav_{{ name }})
        {%- endfor %}
        );
`else
    // post-PAR simulation
    {{ behav.name }} behav (
        {%- set comma3 = joiner(",") -%}
        {%- for name, port in iteritems(behav.ports) %}
            {%- if port.low is not none %}
                {%- for i in range(port.low, port.high) %}
        {{ comma3() }}.{{ "\\" ~ name ~ "[" ~ i ~ "]" }} (behav_{{ name ~ "[" ~ i ~ "]" }})
                {%- endfor %}
            {%- else %}
        {{ comma3() }}.{{ "\\" ~ name }} (behav_{{ name }})
            {%- endif %}
        {%- endfor %}
        );
`endif

    // test setup
    initial begin
        verbose = 1'b1;
        if ($test$plusargs("quiet")) begin
            verbose = 1'b0;
        end

        if ($value$plusargs("waveform_dump=%s", waveform_dump)) begin
            if (verbose)
                $display("[INFO] Dumping waveform: %s", waveform_dump);
            $dumpfile(waveform_dump);
            $dumpvars;
        end

        if (!$value$plusargs("max_cycle=%d", max_cycle_count)) begin
            max_cycle_count = 100_000;
        end

        if (verbose)
            $display("[INFO] Max cycle count: %d", max_cycle_count);

        sys_clk = 1'b0;
        sys_rst = 1'b0;
        #{{ (clk_period|default(10)) * 0.25 }} sys_rst = 1'b1;
        #{{ (clk_period|default(10)) * 100 }} sys_rst = 1'b0;
    end

    // system clock generator
    always #{{ (clk_period|default(10)) / 2.0 }} sys_clk = ~sys_clk;

    // cycle count tracking
    always @(posedge sys_clk) begin
        if (sys_rst) begin
            cycle_count <= 0;
        end else begin
            cycle_count <= cycle_count + 1;
        end

        if (~sys_rst && (cycle_count % 1_000 == 0)) begin
            if (verbose)
                $display("[INFO] %3dK cycles passed", cycle_count / 1_000);
        end

        if (~sys_rst && (cycle_count >= max_cycle_count)) begin
            $display("[ERROR] max cycle count reached, killing simulation");
            $finish;
        end
    end

    // test result reporting
    always @* begin
        if (~tb_rst) begin
            if (sys_success) begin
                $display("[INFO] ********* all tests passed **********");
                $finish;
            end else if (sys_fail) begin
                $display("[INFO] ********* test failed **********");
                $finish;
            end
        end
    end

    // configuration (programming) control 
    localparam  INIT            = 3'd0,     // initializing
                RESET           = 3'd1,     // reset the FPGA
                PROGRAMMING     = 3'd2,     // loading program data
                PROG_STABLIZING = 3'd3,     // waiting for the confirmation on the output
                PROG_DONE       = 3'd4,     // EOP received
                IMPL_RUNNING    = 3'd5;     // running the implementation

    wire                    cfg_clk;
    reg                     cfg_e;
    reg                     cfg_pkt_val_i;
    reg [cfg_width-1:0]     cfg_pkt_data_i;
    wire                    cfg_pkt_val_o;
    wire [cfg_width-1:0]    cfg_pkt_data_o;

    reg [2:0]               state, state_next;
    reg [0:256*8-1]         bs_file;
    reg [63:0]              cfg_m [0:bs_num_qwords - 1];
    reg [15:0]              output_buf;     // buffer for cfg_pkt_data_o
    reg [$clog2(bs_num_qwords)-1:0] word_index;
    reg [5:0]               bit_index;

    assign cfg_clk = sys_clk;

    // FPGA implementation
    {{ impl.name }} impl (
        .cfg_clk(cfg_clk)
        ,.cfg_e(cfg_e)
        ,.cfg_pkt_val_i(cfg_pkt_val_i)
        ,.cfg_pkt_data_i(cfg_pkt_data_i)
        ,.cfg_pkt_val_o(cfg_pkt_val_o)
        ,.cfg_pkt_data_o(cfg_pkt_data_o)
        {%- for name, port in iteritems(impl.ports) %}
            {%- if port.direction.name == 'output' %}
        ,.{{ name }}(impl_{{ port.name }})
            {%- else %}
        ,.{{ name }}(behav_{{ port.name }})
            {%- endif %}
        {%- endfor %}
        );

    // test setup
    initial begin
        state = INIT;
        cfg_e = 1'b0;

        if (!$value$plusargs("bitstream_memh=%s", bs_file)) begin
            $display("[ERROR] Missing required argument: bitstream_memh");
            $finish;
        end

        $readmemh(bs_file, cfg_m);
    end

    // configuration
    always @(posedge sys_clk) begin
        if (sys_rst) begin
            state <= RESET;
        end else begin
            state <= state_next;

            if (state == PROGRAMMING) begin
                if (bit_index == 64 - cfg_width) begin
                    bit_index <= 6'd0;
                    word_index <= word_index + 1;
                end else begin
                    bit_index <= bit_index + cfg_width;
                end
            end else begin
                bit_index <= 0;
                word_index <= 0;
            end

            if (cfg_pkt_val_o) begin
                output_buf <= {{ '{' -}} output_buf, cfg_pkt_data_o {{- '}' }};
            end
        end
    end

    always @* begin
        cfg_e = 1'b0;
        tb_rst = sys_rst;
        cfg_pkt_val_i = 1'b0;
        cfg_pkt_data_i = cfg_m[word_index][bit_index +: cfg_width];
        state_next = state;

        case (state)
            RESET: begin
                state_next = PROGRAMMING;
            end
            PROGRAMMING: begin
                cfg_e = 1'b1;
                tb_rst = 1'b1;
                cfg_pkt_val_i = 1'b1;
                if (word_index == bs_num_qwords - 1 && bit_index == bs_last_bit_index) begin
                    state_next = PROG_STABLIZING;
                end
            end
            PROG_STABLIZING: begin
                cfg_e = 1'b1;
                tb_rst = 1'b1;
                if (output_buf[8+:8] == magic_sop) begin
                    case (output_buf[0+:8])
                        8'hFF: begin
                            state_next = PROG_DONE;
                        end
                        8'h80: begin
                            $display("[ERROR] Programming error: Head of chain mismatch");
                            $finish;
                        end
                        8'h81: begin
                            $display("[ERROR] Programming error: Start of packet mismatch");
                            $finish;
                        end
                        8'h82: begin
                            $display("[ERROR] Programming error: Unknown state");
                            $finish;
                        end
                        default: begin
                            $display("[ERROR] Programming error: Unexpected message type %02h", output_buf[0+:8]);
                            $finish;
                        end
                    endcase
                end
            end
            PROG_DONE: begin
                tb_rst = 1'b1;
                state_next = IMPL_RUNNING;
            end
        endcase
    end

    // output tracking
    always @(posedge sys_clk) begin
        if (~sys_rst && state == IMPL_RUNNING) begin
            {%- for name, port in iteritems(behav.ports) %}
                {%- if port.direction.name == 'output' %}
            if (verbose && impl_{{ name }} !== behav_{{ name }}) begin
                $display("[WARNING] [Cycle %04d] Output mismatch: {{ name }}, impl (%h) != behav (%h)",
                    cycle_count, impl_{{ name }}, behav_{{ name }});
            end
                {%- endif %}
            {%- endfor %}
        end
    end

endmodule
