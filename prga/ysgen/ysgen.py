# -*- encoding: ascii -*-
# Python 2 and 3 compatible
from __future__ import division, absolute_import, print_function
from prga.compatible import *

from prga.util import Object, uno
from prga.exception import PRGAInternalError

import os
import jinja2 as jj
from collections import namedtuple

__all__ = ['YosysTemplateEntry', 'YosysTemplateRegistry', 'YosysGenerator']

# ----------------------------------------------------------------------------
# -- Yosys Template Entry ----------------------------------------------------
# ----------------------------------------------------------------------------
class YosysTemplateEntry(namedtuple('YosysTemplateEntry', 'template parameters')):
    """An entry in the Yosys template registry.

    Args:
        template (:obj:`str`): Template for generating a file
        parameters (:obj:`Mapping` [:obj:`str`, Any ]): Additional parameters for the template
    """

    def __new__(cls, template, parameters = None):
        return super(YosysTemplateEntry, cls).__new__(cls, template, uno(parameters, {}))

# ----------------------------------------------------------------------------
# -- Yosys Template Registry -------------------------------------------------
# ----------------------------------------------------------------------------
class YosysTemplateRegistry(Object):
    """A registry for necessary info for generating the blackbox modules, BRAM mapping rules, and techmap files needed
    by Yosys."""

    __slots__ = ['_blackboxes', '_bram_rules', '_techmaps']
    def __init__(self):
        super(YosysTemplateRegistry, self).__init__()
        self._blackboxes = {}
        self._bram_rules = {}
        self._techmaps = {}

    @property
    def blackboxes(self):
        """:obj:`Mapping` [:obj:`str`, `YosysTemplateEntry` ]: A mapping from module names to template entries."""
        return self._blackboxes

    @property
    def bram_rules(self):
        """:obj:`Mapping` [:obj:`str`, `YosysTemplateEntry` ]: A mapping from module names to template entries."""
        return self._bram_rules

    @property
    def techmaps(self):
        """:obj:`Mapping` [:obj:`str`, `YosysTemplateEntry` ]: A mapping from module names to template entries."""
        return self._techmaps

    def register_blackbox_template(self, name, template, parameters = None):
        """Register a blackbox template.

        Args:
            name (:obj:`str`): Name of the module which activates this entry
            template (:obj:`str`): Template or vanilla source file for the blacbox
            parameters (:obj:`Mapping` [:obj:`str`, Any ]): Additional parameters for the template

        Blackbox is auto-generated for primitives, so register blackbox template only if you wish to override the
        blackbox generated by default.
        """
        if name in self._blackboxes:
            raise PRGAInternalError("Blackbox template entry '{}' already registered".format(name))
        return self._blackboxes.setdefault(name, YosysTemplateEntry(template, parameters))

    def register_bram_rule_template(self, name, template, parameters = None):
        """Register a BRAM rule template.

        Args:
            name (:obj:`str`): Name of the module which activates this entry
            template (:obj:`str`): Template or vanilla source file for the BRAM rule
            parameters (:obj:`Mapping` [:obj:`str`, Any ]): Additional parameters for the template
        """
        if name in self._bram_rules:
            raise PRGAInternalError("BRAM rule template entry '{}' already registered".format(name))
        return self._bram_rules.setdefault(name, YosysTemplateEntry(template, parameters))

    def register_techmap_template(self, name, template, parameters = None):
        """Register a techmap template.

        Args:
            name (:obj:`str`): Name of the module which activates this entry
            template (:obj:`str`): Template or vanilla source file for the techmap
            parameters (:obj:`Mapping` [:obj:`str`, Any ]): Additional parameters for the template

        Primitives can be simply used as blackbox modules if no applicable techmap is provided.
        """
        if name in self._techmaps:
            raise PRGAInternalError("Techmap template entry '{}' already registered".format(name))
        return self._techmaps.setdefault(name, YosysTemplateEntry(template, parameters))

# ----------------------------------------------------------------------------
# -- Yosys Generator ---------------------------------------------------------
# ----------------------------------------------------------------------------
class YosysGenerator(object):
    """Yosys script and related resources generator.

    Args:
        registry (`YosysTemplateRegistry`): Registry of the templates
        additional_template_search_paths (:obj:`Sequence` [:obj:`str` ]): A sequence of additional paths which contain
            blackbox/bram rules/techmap source files or template files
    """

    def __init__(self, registry, additional_template_search_paths = tuple()):
        self.registry = registry
        search_paths = [os.path.join(os.path.dirname(os.path.abspath(__file__)), 'templates')]
        search_paths.extend(additional_template_search_paths)
        self.env = jj.Environment(loader = jj.FileSystemLoader(search_paths))

    def generate_blackbox(self, f, module):
        entry = self.registry.blackboxes.get(module.name, YosysTemplateEntry('blackbox.lib.tmpl.v'))
        template = self.env.get_template(entry.template)
        parameters = {
                'module': module,
                'itervalues': itervalues,
                'iteritems': iteritems,
                }
        parameters.update(entry.parameters)
        template.stream(parameters).dump(f, encoding='ascii')

    def generate_bram_rule(self, f, module):
        entry = self.registry.bram_rules.get(module.name)
        if entry is None:
            return
        template = self.env.get_template(entry.template)
        parameters = {
                'module': module,
                'itervalues': itervalues,
                'iteritems': iteritems,
                }
        parameters.update(entry.parameters)
        template.stream(parameters).dump(f, encoding='ascii')

    def generate_techmap(self, f, module):
        entry = self.registry.techmaps.get(module.name)
        if entry is None:
            return
        template = self.env.get_template(entry.template)
        parameters = {
                'module': module,
                'itervalues': itervalues,
                'iteritems': iteritems,
                }
        parameters.update(entry.parameters)
        template.stream(parameters).dump(f, encoding='ascii')
