// Automatically generated by PRGA's RTL generator
`timescale 1ns/1ps

`include "prga_app_softregs.vh"

module prga_app_softregs #(
    parameter   DECOUPLED_INPUT = 1
    , parameter DECOUPLED_OUTPUT = 1
) (
    input wire                                      clk
    , input wire                                    rst_n

    // == Val/Rdy Interface ===================================================
    , output reg                                    softreg_req_rdy
    , input wire                                    softreg_req_val
    , input wire [`PRGA_APP_SOFTREG_ADDR_WIDTH-1:0] softreg_req_addr
    , input wire [`PRGA_APP_SOFTREG_DATA_BYTES-1:0] softreg_req_strb
    , input wire [`PRGA_APP_SOFTREG_DATA_WIDTH-1:0] softreg_req_data

    , input wire                                    softreg_resp_rdy
    , output reg                                    softreg_resp_val
    , output reg [`PRGA_APP_SOFTREG_DATA_WIDTH-1:0] softreg_resp_data

    // == Soft Register Ports =================================================
    {%- for name, r in module.softregs.regs.items() %}
    // {{ r.type_.name }} soft register: {{ name }}
        {%- if r.type_.is_readonly %}
    , input wire [`PRGA_APP_SOFTREG_VAR_{{ name | upper }}_DATA_WIDTH - 1:0] var_{{ name }}_i
        {%- elif r.type_.is_echo %}
    , input wire [`PRGA_APP_SOFTREG_VAR_{{ name | upper }}_DATA_WIDTH - 1:0] var_{{ name }}_i
    , output reg [`PRGA_APP_SOFTREG_VAR_{{ name | upper }}_DATA_WIDTH - 1:0] var_{{ name }}_o
        {%- elif r.type_.is_const %}
    , output wire [`PRGA_APP_SOFTREG_VAR_{{ name | upper }}_DATA_WIDTH - 1:0] var_{{ name }}_o
        {%- else %}
    , output reg [`PRGA_APP_SOFTREG_VAR_{{ name | upper }}_DATA_WIDTH - 1:0] var_{{ name }}_o
        {%- endif %}
    {% endfor %}
    );

    // == Input Request Buffering ==
    reg                                     softreg_req_rdy_p;
    wire                                    softreg_req_val_f;
    wire [`PRGA_APP_SOFTREG_ADDR_WIDTH-1:0] softreg_req_addr_f;
    wire [`PRGA_APP_SOFTREG_DATA_BYTES-1:0] softreg_req_strb_f;
    wire [`PRGA_APP_SOFTREG_DATA_WIDTH-1:0] softreg_req_data_f;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (DECOUPLED_INPUT)
        ,.DATA_WIDTH    (
            `PRGA_APP_SOFTREG_ADDR_WIDTH
            + `PRGA_APP_SOFTREG_DATA_BYTES
            + `PRGA_APP_SOFTREG_DATA_WIDTH
        )
    ) req_valrdy_buf (
        .clk            (clk)
        ,.rst           (~rst_n)
        ,.rdy_o         (softreg_req_rdy)
        ,.val_i         (softreg_req_val)
        ,.data_i        ({
            softreg_req_addr
            , softreg_req_strb
            , softreg_req_data
        })
        ,.rdy_i         (softreg_req_rdy_p)
        ,.val_o         (softreg_req_val_f)
        ,.data_o        ({
            softreg_req_addr_f
            , softreg_req_strb_f
            , softreg_req_data_f
        })
        );

    // strb -> mask
    wire [`PRGA_APP_SOFTREG_DATA_WIDTH-1:0] softreg_req_mask_f;

    genvar i;
    generate for (i = 0; i < `PRGA_APP_SOFTREG_DATA_BYTES; i = i + 1) begin
        assign softreg_req_mask_f[i * 8 +: 8] = {8 {softreg_req_strb_f[i]} };
    end endgenerate

    // == Output Response Buffering ==
    wire                                    softreg_resp_rdy_f;
    reg                                     softreg_resp_val_p;
    reg [`PRGA_APP_SOFTREG_DATA_WIDTH-1:0]  softreg_resp_data_p;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (DECOUPLED_OUTPUT)
        ,.DATA_WIDTH    (`PRGA_APP_SOFTREG_DATA_WIDTH)
    ) resp_valrdy_buf (
        .clk            (clk)
        ,.rst           (~rst_n)
        ,.rdy_o         (softreg_resp_rdy_f)
        ,.val_i         (softreg_resp_val_p)
        ,.data_i        (softreg_resp_data_p)
        ,.rdy_i         (softreg_resp_rdy)
        ,.val_o         (softreg_resp_val)
        ,.data_o        (softreg_resp_data)
        );

    // == Input Request Handling ==
    always @* begin
        softreg_req_rdy_p = softreg_resp_rdy_f;
    end

    // == Write Request ==

    {%- for name, r in module.softregs.regs.items() %}
        {%- if r.type_.is_const %}
    // {{ r.type_.name }} soft register: {{ name }}
    assign var_{{ name }}_o = `PRGA_APP_SOFTREG_VAR_{{ name | upper }}_CONSTVAL;
        {%- elif not r.type_.is_readonly %}
    // {{ r.type_.name }} soft register: {{ name }}
    always @(posedge clk) begin
        if (~rst_n) begin
            var_{{ name }}_o <= `PRGA_APP_SOFTREG_VAR_{{ name | upper }}_RSTVAL;
        end else if (softreg_req_rdy_p && softreg_req_val_f
            && |softreg_req_strb_f[0 +: `PRGA_APP_SOFTREG_VAR_{{ name | upper }}_DATA_BYTES]
            && softreg_req_addr_f == `PRGA_APP_SOFTREG_VAR_{{ name | upper }}_ADDR
        ) begin
            var_{{ name }}_o <= (softreg_req_mask_f & softreg_req_data_f) | (~softreg_req_mask_f & var_{{ name }}_o);
            {%- if r.type_.is_echo %}
        end else begin
            var_{{ name }}_o <= var_{{ name }}_i;
            {%- elif r.type_.is_pulse %}
        end else begin
            var_{{ name }}_o <= `PRGA_APP_SOFTREG_VAR_{{ name | upper }}_RSTVAL;
            {%- endif %}
        end
    end
        {%- endif %}
    {% endfor %}

    // == Response ==
    always @* begin
        softreg_resp_val_p = softreg_req_rdy_p && softreg_req_val_f;
        softreg_resp_data_p = {`PRGA_APP_SOFTREG_DATA_WIDTH {1'b0} };

        if (softreg_req_rdy_p && softreg_req_val_f && ~|softreg_req_strb_f) begin
            case (softreg_req_addr_f)
                {%- for name, r in module.softregs.regs.items() %}
            `PRGA_APP_SOFTREG_VAR_{{ name | upper }}_ADDR:
                    {%- if r.type_.is_readonly or r.type_.is_echo %}
                softreg_resp_data_p = { {`PRGA_APP_SOFTREG_DATA_WIDTH {1'b0} }, var_{{ name }}_i};
                    {%- elif r.type_.is_const %}
                softreg_resp_data_p = { {`PRGA_APP_SOFTREG_DATA_WIDTH {1'b0} }, `PRGA_APP_SOFTREG_VAR_{{ name | upper }}_CONSTVAL};
                    {%- elif r.type_.is_pulse %}
                softreg_resp_data_p = { {`PRGA_APP_SOFTREG_DATA_WIDTH {1'b0} }, `PRGA_APP_SOFTREG_VAR_{{ name | upper }}_RSTVAL};
                    {%- else %}
                softreg_resp_data_p = { {`PRGA_APP_SOFTREG_DATA_WIDTH {1'b0} }, var_{{ name }}_o};
                    {%- endif %}
                {%- endfor %}
            endcase
        end
    end

endmodule
