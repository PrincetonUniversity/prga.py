// Automatically generated by PRGA's RTL generator
`include "prga_yami.vh"

/*
* Decoupled memory load shim.
*
* No internal buffer, so beware of deadlocks
*/

module {{ module.name }} #(
    parameter   KERNEL_DATA_BYTES_LOG2  = {{ ((module.ports.kresp_data|length) // 8 - 1).bit_length() }}
    , parameter KERNEL_ADDR_WIDTH       = {{ module.ports.kreq_addr|length }}
) (
    input wire                                      clk
    , input wire                                    rst_n

    // == Control (Soft Registers) ===========================================
    , input wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]    cfg_addr    // base address

    // == Kernel-side Request ================================================
    , input wire                                    kreq_vld
    , input wire [31:0]                             kreq_addr   // incr 1 per KERNEL_DATA_BYTES bytes!
    , output wire                                   kreq_rdy

    // == Kernel-side Response ===============================================
    , input wire                                    kresp_rdy
    , output wire                                   kresp_vld
    , output wire [(8<<KERNEL_DATA_BYTES_LOG2)-1:0] kresp_data

    // == Memory-side Request ================================================
    // -- FMC (fabric-memory channel) ----------------------------------------
    , input wire                                    fmc_rdy
    , output wire                                   fmc_vld
    , output wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]    fmc_type
    , output wire [`PRGA_YAMI_SIZE_WIDTH-1:0]       fmc_size
    , output wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]   fmc_addr

    // -- MFC (memory-fabric channel) ----------------------------------------
    , output wire                                   mfc_rdy
    , input wire                                    mfc_vld
    , input wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]    mfc_data
    );

    assign kreq_rdy = fmc_rdy;
    assign kresp_vld = mfc_vld;
    assign kresp_data = mfc_data[0 +: (8<<KERNEL_DATA_BYTES_LOG2)];

    assign fmc_vld = kreq_vld;
    assign fmc_type = `PRGA_YAMI_REQTYPE_LOAD;
    assign fmc_size = KERNEL_DATA_BYTES_LOG2 == 0 ? `PRGA_YAMI_SIZE_1B :
                      KERNEL_DATA_BYTES_LOG2 == 1 ? `PRGA_YAMI_SIZE_2B :
                      KERNEL_DATA_BYTES_LOG2 == 2 ? `PRGA_YAMI_SIZE_4B :
                      KERNEL_DATA_BYTES_LOG2 == 3 ? `PRGA_YAMI_SIZE_8B :
                      KERNEL_DATA_BYTES_LOG2 == 4 ? `PRGA_YAMI_SIZE_16B :
                                                    `PRGA_YAMI_SIZE_FULL;

    assign fmc_addr = cfg_addr + (kreq_addr << KERNEL_DATA_BYTES_LOG2);
    assign mfc_rdy = kresp_rdy;

endmodule
