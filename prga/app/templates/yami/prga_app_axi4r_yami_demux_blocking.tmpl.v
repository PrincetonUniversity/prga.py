// Automatically generated by PRGA's RTL generator
`include "prga_axi4.vh"
`include "prga_yami.vh"

/*
* AXI4 input (AR/R channels), YAMI output, blocking memory demuxer.
*
*   Distribute memory requests based on the address.
*/

module {{ module.name }} #(
    parameter   AXI4_ADDR_WIDTH = {{ module.ports.araddr|length }}
    , parameter AXI4_DATA_WIDTH = {{ module.ports.rdata|length }}
) (
    input wire                                      clk
    , input wire                                    rst_n

    // == Control (Soft Registers) ===========================================
    //  XXX: Control values are assumed to be constant throughout a call to kernel
    , input wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]    cfg_addr_offset

    // == Kernel-side AXI4 Interface =========================================
    , output reg                                    arready
    , input wire                                    arvalid
    , input wire [`PRGA_AXI4_AXSIZE_WIDTH-1:0]      arsize
    , input wire [AXI4_ADDR_WIDTH-1:0]              araddr

    , input wire                                    rready
    , output wire                                   rvalid
    , output wire                                   rlast
    , output wire [`PRGA_AXI4_XRESP_WIDTH-1:0]      rresp
    , output wire [AXI4_DATA_WIDTH-1:0]             rdata

    // == Destinations =======================================================
    {%- for i in range(module.num_dsts) %}
    , input wire                                    dst{{ i }}_fmc_rdy
    , output reg                                    dst{{ i }}_fmc_vld
    , output wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]    dst{{ i }}_fmc_type
    , output wire [`PRGA_YAMI_SIZE_WIDTH-1:0]       dst{{ i }}_fmc_size
    , output wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]   dst{{ i }}_fmc_addr

    , output reg                                    dst{{ i }}_mfc_rdy
    , input wire                                    dst{{ i }}_mfc_vld
    , input wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]    dst{{ i }}_mfc_data

    {% endfor %}
    );

    localparam  DEMUX_ADDR_LOW  = {{ module.demux_addr_low }};
    localparam  DEMUX_ADDR_HIGH = {{ module.demux_addr_high }};

    localparam  NUM_DST         = {{ module.num_dsts }};

    reg                 resp_pending;    // blocked until response comes back
    reg [NUM_DST-1:0]   resp_mask, resp_mask_next;

    always @(posedge clk) begin
        if (~rst_n) begin
            resp_pending     <= 1'b0;
            resp_mask   <= { NUM_DST {1'b0} };
        end else if (arready && arvalid) begin
            resp_pending     <= 1'b1;
            resp_mask   <= resp_mask_next;
        end else if (rready && rvalid) begin
            resp_pending     <= 1'b0;
            resp_mask   <= { NUM_DST {1'b0} };
        end
    end

    // == Request Forwarding =================================================
        // common signals
    wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]     fmc_type;
    wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]    fmc_addr;
    wire [`PRGA_YAMI_SIZE_WIDTH-1:0]        fmc_size;

    assign fmc_type = `PRGA_YAMI_REQTYPE_LOAD;
    assign fmc_addr = cfg_addr_offset + araddr;
    assign fmc_size = arsize == `PRGA_AXI4_AXSIZE_32B ? `PRGA_YAMI_SIZE_32B :
                      arsize == `PRGA_AXI4_AXSIZE_16B ? `PRGA_YAMI_SIZE_16B :
                      arsize == `PRGA_AXI4_AXSIZE_8B  ? `PRGA_YAMI_SIZE_8B :
                      arsize == `PRGA_AXI4_AXSIZE_4B  ? `PRGA_YAMI_SIZE_4B :
                      arsize == `PRGA_AXI4_AXSIZE_2B  ? `PRGA_YAMI_SIZE_2B :
                      arsize == `PRGA_AXI4_AXSIZE_1B  ? `PRGA_YAMI_SIZE_1B :
                                                        `PRGA_YAMI_SIZE_FULL;

    always @* begin
        arready = 1'b0;
        resp_mask_next = { NUM_DST {1'b0} };
        {%- for i in range(module.num_dsts) %}
        dst{{ i }}_fmc_vld = 1'b0;
        {%- endfor %}

        case (fmc_addr[DEMUX_ADDR_HIGH : DEMUX_ADDR_LOW])
            {%- for i in range(2 ** (module.demux_addr_high - module.demux_addr_low + 1)) %}
            {{ module.demux_addr_high - module.demux_addr_low + 1 }}'d{{ i }}: begin
                resp_mask_next[{{ i % module.num_dsts }}] = 1'b1; 
                arready = dst{{ i % module.num_dsts }}_fmc_rdy && !resp_pending;
                dst{{ i % module.num_dsts }}_fmc_vld = arvalid && !resp_pending;
            end
            {%- endfor %}
        endcase
    end

    {%- for i in range(module.num_dsts) %}
    assign dst{{ i }}_fmc_type = fmc_type;
    assign dst{{ i }}_fmc_addr = fmc_addr;
    assign dst{{ i }}_fmc_size = fmc_size;
    {%- endfor %}

    // == Response Arbitration ===============================================
    {%- for i in range(module.num_dsts) %}
    assign dst{{ i }}_mfc_rdy = resp_mask[{{ i }}] && rready;
    {%- endfor %}

    assign rvalid = |(resp_mask & {
        {%- set comma = joiner(", ") %}
        {%- for i in range(module.num_dsts)|reverse %}
        {{ comma() }}dst{{ i }}_mfc_vld
        {%- endfor %}
    });
    assign rlast = 1'b1;
    assign rresp = `PRGA_AXI4_XRESP_OKAY;
    assign rdata = (
        {%- set or_ = joiner("| ") %}
        {%- for i in range(module.num_dsts) %}
        {{ or_() }}({ AXI4_DATA_WIDTH {resp_mask[{{ i }}]} } & dst{{ i }}_mfc_data)
        {%- endfor %}
        );

endmodule
