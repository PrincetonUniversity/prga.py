// Automatically generated by PRGA's RTL generator
module prga_app_softreg_rdempty_la #(
    parameter   DATA_WIDTH  = 32
    , parameter RSTVAL      = 32'd0
) (
    input wire                          clk
    , input wire                        rst_n

    // -- system-side --------------------------------------------------------
    // -- request --
    , output wire                       req_rdy
    , input wire                        req_vld
    , input wire                        req_we
    , input wire [DATA_WIDTH - 1:0]     req_wmask
    , input wire [DATA_WIDTH - 1:0]     req_data

    // -- response --
    , input wire                        resp_rdy
    , output reg                        resp_vld
    , output reg [DATA_WIDTH - 1:0]     resp_data

    // -- kernel-side --------------------------------------------------------
    , input wire                        var_empty
    , input wire [DATA_WIDTH - 1:0]     var_i
    , output reg                        var_rd
    );

    always @(posedge clk) begin
        if (~rst_n) begin
            var_rd <= 1'b0;
        end else if (req_rdy && req_vld && !req_we) begin
            var_rd <= 1'b1;
        end else if (!var_empty) begin
            var_rd <= 1'b0;
        end
    end

    always @(posedge clk) begin
        if (~rst_n) begin
            resp_vld <= 1'b0;
        end else if ((req_rdy && req_vld && req_we) || (!var_empty && var_rd)) begin
            resp_vld <= 1'b1;
        end else if (resp_rdy) begin
            resp_vld <= 1'b0;
        end
    end

    always @(posedge clk) begin
        if (!var_empty && var_rd)
            resp_data <= var_i;
    end

    // low throughput, but simpler design, lower resource consumption, and
    // better timing
    assign req_rdy = !var_rd && !resp_vld;

endmodule
