// Automatically generated by PRGA's RTL generator
module {{ module.name }} #(
    parameter   REGISTERED = 1,
    parameter   DECOUPLED = 0,
    parameter   DATA_WIDTH = {{ module.ports.data_i|length }}
) (
    input wire                      clk,
    input wire                      rst_n,

    output reg                      rdy_o,
    input wire                      vld_i,
    input wire [DATA_WIDTH-1:0]     data_i,

    input wire                      rdy_i,
    output reg                      vld_o,
    output reg [DATA_WIDTH-1:0]     data_o
);

    generate if (!REGISTERED) begin
        always @* begin
            rdy_o       = rdy_i;
            vld_o       = vld_i;
            data_o      = data_i;
        end
    end else if (DECOUPLED) begin
        reg                     rst_nf;
        reg [1:0]               rd_ptr, wr_ptr;
        reg [DATA_WIDTH-1:0]    data    [0:1];

        always @(posedge clk) begin
            if (~rst_n) begin
                rst_nf  <= 1'b0;
                rd_ptr  <= 2'b0;
                wr_ptr  <= 2'b0;

                data[0] <= {DATA_WIDTH {1'b0} };
                data[1] <= {DATA_WIDTH {1'b0} };
            end else begin
                rst_nf  <= 1'b1;

                if (rdy_o && vld_i) begin
                    data[wr_ptr[0]]     <= data_i;
                    wr_ptr              <= wr_ptr + 1;
                end

                if (rdy_i && vld_o) begin
                    rd_ptr              <= rd_ptr + 1;
                end
            end
        end

        always @* begin
            rdy_o = rst_nf && wr_ptr != {~rd_ptr[1], rd_ptr[0]}; 
            vld_o = rst_nf && rd_ptr != wr_ptr;
            data_o = data[rd_ptr[0]];
        end
    end else begin
        always @(posedge clk) begin
            if (~rst_n) begin
                vld_o   <= 1'b0;
                data_o  <= {DATA_WIDTH {1'b0} };
            end else if (rdy_o && vld_i) begin
                vld_o   <= 1'b1;
                data_o  <= data_i;
            end else if (rdy_i) begin
                vld_o   <= 1'b0;
            end
        end

        always @* begin
            rdy_o       = rst_n && (~vld_o || rdy_i);
        end
    end endgenerate

endmodule

