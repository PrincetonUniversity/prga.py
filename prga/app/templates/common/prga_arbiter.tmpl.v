// Automatically generated by PRGA's RTL generator
{%- set num_candidates = module.num_candidates %}
{%- set candidates_id_width = (module.num_candidates - 1).bit_length() %}
module {{ module.name }} ( clk, rst_n, candidates, ack, current, next);

    localparam  NUM_CANDIDATES = {{ num_candidates }};
    localparam  CANDIDATE_ID_WIDTH = {{ candidates_id_width }}

    input wire clk, rst_n, ack;
    input wire [NUM_CANDIDATES-1:0] candidates;

    // -- function: count trailing zeros --
    function automatic [CANDIDATE_ID_WIDTH-1:0] tzc;
        input [CANDIDATE_ID_WIDTH-1:0] arg;

        tzc = 0;
        integer i;
        for (i = 0; i < NUM_CANDIDATES; i = i + 1) begin
            if (arg[i]) begin
                tzc = i;
                break;
            end
        end

    endfunction

    reg [CANDIDATE_ID_WIDTH-1:0] current;

    always @(posedge clk) begin
        if (~rst_n) begin
            current <= { CANDIDATE_ID_WIDTH {1'b0} };
        end else if (!candidates[current] || ack) begin
            current <= current + tzc({candidates, candidates} >> current);
        end
    end

endmodule
