// Automatically generated by PRGA's RTL generator
{%- set cfg_width = module.all_ports.cfg_i|length %}
module {{ module.name }} (
    input wire [0:0] cfg_clk,
    input wire [0:0] cfg_rst,
    input wire [0:0] cfg_rd,
    output reg [{{ cfg_width - 1 }}:0] cfg_o,
    output reg [0:0] cfg_empty,
    input wire [0:0] cfg_wr,
    input wire [{{ cfg_width - 1 }}:0] cfg_i,
    output reg [0:0] cfg_full
    );

    reg [{{ cfg_width - 1 }}:0] data [0:{{ module.depth - 1 }}];
    reg [{{ module.log2_depth }}:0] wr_ptr, rd_ptr;

    always @(posedge cfg_clk or posedge cfg_rst) begin
        if (cfg_rst) begin
            wr_ptr <= {{ module.log2_depth }}'b0;
            rd_ptr <= {{ module.log2_depth }}'b0;
        end else begin
            if (~cfg_full && cfg_wr) begin
                data[wr_ptr] <= cfg_i;
                wr_ptr <= wr_ptr + 1;
            end

            if (~cfg_empty && cfg_rd) begin
                rd_ptr <= rd_ptr + 1;
            end
        end
    end

    // combinational outputs
    always @* begin
        cfg_o = data[rd_ptr];
        cfg_empty = rd_ptr == wr_ptr;
        cfg_full = rd_ptr == {{ '{' }}~wr_ptr[{{ module.log2_depth }}], wr_ptr[{{ module.log2_depth - 1 }}:0]{{ '}' }};
    end

endmodule

