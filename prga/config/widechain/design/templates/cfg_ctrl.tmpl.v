// Automatically generated by PRGA's RTL generator
{%- set cfg_width = module.all_ports.cfg_i|length %}
module {{ module.name }} (
    input wire [0:0] cfg_clk,
    input wire [0:0] cfg_e,

    // intf w/ prev ctrl
    output reg [0:0] cfg_full,
    input wire [{{ cfg_width - 1 }}:0] cfg_i,
    input wire [0:0] cfg_wr,

    // intf w/ next ctrl
    input wire [0:0] cfg_full_next,
    output reg [{{ cfg_width - 1 }}:0] cfg_o,
    output reg [0:0] cfg_wr_next,

    // intf w/ data chain
    output reg [{{ cfg_width - 2 }}:0] cfg_data_head,
    input wire [{{ cfg_width - 2 }}:0] cfg_data_tail,
    output reg [0:0] cfg_data_we
    );

    // internal ctrl wires
    reg [{{ cfg_width - 2 }}] ctrl, msg;
    reg shift_en, sel;

    // FIFO
    reg [{{ cfg_width - 1 }}:0] buffer [0:{{ module.depth - 1 }}];
    reg [{{ module.log2_depth }}:0] wr_ptr, rd_ptr;

    always @(posedge cfg_clk or negedge cfg_e) begin
        if (~cfg_e) begin
            wr_ptr <= {{ module.log2_depth }}'b0;
            rd_ptr <= {{ module.log2_depth }}'b0;
            ctrl <= {{ cfg_width }}'b0;
        end else begin
            if (~cfg_full && cfg_wr) begin
                buffer[wr_ptr] <= cfg_i;
                wr_ptr <= wr_ptr + 1;
            end

            if (shift_en) begin
                rd_ptr <= rd_ptr + 1;

                if (sel) begin
                    ctrl <= msg;
                end
            end
        end
    end

    // combinational logic
    always @* begin
        {sel, msg} = buffer[rd_ptr];
        shift_en = cfg_e && rd_ptr != wr_ptr && ~cfg_full_next;
    end

    // combinational outputs
    always @* begin
        cfg_full = rd_ptr == {{ '{' }}~wr_ptr[{{ module.log2_depth }}], wr_ptr[{{ module.log2_depth - 1 }}:0]{{ '}' }};
        cfg_wr_next = shift_en;
        cfg_data_head = msg;

        if (sel) begin
            cfg_o = {{ '{' }}1'b1, ctrl{{ '}' }};
            cfg_data_we = 1'b0;
        end else if (ctrl[0]) begin     // bypass
            cfg_o = {{ '{' }}1'b0, msg{{ '}' }};
            cfg_data_we = 1'b0;
        end else begin
            cfg_o = {{ '{' }}1'b0, cfg_data_tail{{ '}' }};
            cfg_data_we = 1'b1;
        end
    end

endmodule
