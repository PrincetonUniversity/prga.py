// Automatically generated by PRGA's RTL generator
{% set width = module.ports.in|length -%}
{% set cfg_width = module.ports.cfg_i|length -%}
module {{ module.name }} (
    input wire [{{ width - 1 }}:0] in,
    output reg [0:0] out,

    input wire [0:0] cfg_e,
    input wire [0:0] cfg_clk,
    input wire [{{ cfg_width - 1 }}:0] cfg_i,
    output wire [{{ cfg_width - 1 }}:0] cfg_o
    );

    reg [{{ module.cfg_bitcount - 1 }}:0] cfg_d;

    always @* begin
        if (cfg_e) begin
            out = 1'b0;
        end else begin
            case (in)   // synopsys infer_mux
                {%- for i in range(2 ** width) %}
                {{ width }}'d{{ i }}: cfg_d[{{ i }}];
                {%- endfor %}
            endcase
        end
    end

    wire [{{ module.cfg_bitcount + cfg_width - 1 }}:0] cfg_d_next;

    always @(posedge cfg_clk) begin
        if (cfg_e) begin
            cfg_d <= cfg_d_next;
        end
    end

    assign cfg_d_next = {{ '{' -}} cfg_d, cfg_i {{- '}' }};
    assign cfg_o = cfg_d_next[{{ module.cfg_bitcount + cfg_width - 1 }} -: {{ cfg_width }}];

endmodule
