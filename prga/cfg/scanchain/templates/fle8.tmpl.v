// Automatically generated by PRGA's RTL generator
{%- set cfg_width = module.ports.cfg_i|length %}
`timescale 1ns/1ps
module fle8 (
    // user accessible ports
    input wire [0:0] clk,
    input wire [7:0] in,
    output reg [1:0] out,
    input wire [0:0] cin,
    output reg [0:0] cout,

    // configuartion ports
    input wire [0:0] cfg_clk,
    input wire [0:0] cfg_e,
    input wire [0:0] cfg_we,
    input wire [{{ cfg_width - 1 }}:0] cfg_i,
    output wire [{{ cfg_width - 1 }}:0] cfg_o
    );

    // modes:
    //  1. LUT6 + optional DFF
    //  2. 2x SUB
    //
    // SUB modes:
    //  1. LUT5 + optional DFF
    //  2. 2xLUT4 + adder + optional DFF (sum)
    //
    // carrychain: cin -> FA(SUB0) -> FA(SUB1) -> cout

    localparam  LUT4_DATA_WIDTH = 16;

    // SUB 0: 35 bits
    localparam  LUT4A_DATA_BASE = 0;
    localparam  LUT4B_DATA_BASE = LUT4A_DATA_BASE + LUT4_DATA_WIDTH;
    localparam  ENABLE_CIN_FABRIC_SUB0 = LUT4B_DATA_BASE;
    localparam  DISABLE_FF_SUB0 = ENABLE_CIN_FABRIC_SUB0 + 1;
    localparam  DISABLE_ADDER_SUB0 = DISABLE_ADDER_SUB0 + 1;

    // SUB 1:
    localparam  LUT4C_DATA_BASE = DISABLE_FF_SUB0;
    localparam  LUT4D_DATA_BASE = LUT4C_DATA_BASE + LUT4_DATA_WIDTH;
    localparam  ENABLE_CIN_FABRIC_SUB1 = LUT4D_DATA_BASE;
    localparam  DISABLE_FF_SUB1 = ENABLE_CIN_FABRIC_SUB1 + 1;
    localparam  DISABLE_ADDER_SUB1 = DISABLE_ADDER_SUB1 + 1;

    // LUT6
    localparam  DISABLE_LUT6 = DISABLE_FF_SUB1 + 1;
    localparam  CFG_BITCOUNT = DISABLE_LUT6 + 1;    // 71

    {% if module.view.is_logical %}
    // synopsys translate_off
    generate if (CFG_BITCOUNT != {{ module.cfg_bitcount }}) begin
        // Total number of configuration bits don't match with software
        //      software: {{ module.cfg_bitcount }}
        //      hardware: CFG_BITCOUNT
        __PRGA_RTLGEN_ERROR__ __error__();
    end endgenerate
    // synopsys translate_on
    {%- endif %}

    wire [CFG_BITCOUNT - 1:0] cfg_d;
    reg       internal_cin;
    reg [7:0] internal_in;
    reg [1:0] internal_lut4 [1:0];  // A=[0][0], B=[1][0], C=[0][1], D=[1][1]
    reg [1:0] internal_lut5;
    reg       internal_lut6;
    reg [1:0] internal_sum  [1:0];  // {cout, s} (SUB0) = [0], {cout, s} (SUB1) = [1]
    reg [1:0] internal_ff;

    // synopsys translate_off
    // in case the sensitivity list is never triggered
    initial begin
        internal_cin = 1'b0;
        internal_in = 8'b0;
    end
    // synopsys translate_on

    always @* begin
        internal_in = in;
        internal_cin = cin;

        // synopsys translate_off
        // in simulation, force unconnected LUT input to be zeros
        {%- for i in range(8) %}
        if (in[{{ i }}] === 1'bx) begin
            internal_in[{{ i }}] = 1'b0;
        end
        {%- endfor %}

        if (cin === 1'bx) begin
            internal_cin = 1'b0;
        end
        // synopsys translate_on
    end

    always @(posedge clk) begin
        if (cfg_e) begin
            internal_ff <= 2'b0;
        end else begin
            internal_ff[0] <= (~cfg_d[DISABLE_LUT6]) ? internal_lut6 :
                              cfg_d[DISABLE_ADDER_SUB0] ? internal_lut5[0] : internal_sum[0][0];
            internal_ff[1] <= cfg_d[DISABLE_ADDER_SUB1] ? internal_lut5[1] : internal_sum[1][0];
        end
    end

    always @* begin
        case (internal_in[3:0]) begin
            {%- for i in range(16) %}
            4'd{{ i }}: begin
                internal_lut4[0][0] = cfg_d[LUT4A_DATA_BASE + {{ i }}];
                internal_lut4[1][0] = cfg_d[LUT4B_DATA_BASE + {{ i }}];
            end
            {%- endfor %}
        end

        case (cfg_d[DISABLE_LUT6] ? {internal_in[5:4], internal_in[1:0]} : internal_in[3:0]) begin
            {%- for i in range(16) %}
            4'd{{ i }}: begin
                internal_lut4[0][1] = cfg_d[LUT4C_DATA_BASE + {{ i }}];
                internal_lut4[1][1] = cfg_d[LUT4D_DATA_BASE + {{ i }}];
            end
            {%- endfor %}
        end
    end

    always @* begin
        internal_sum[0] = (internal_lut4[1][0] + internal_lut4[0][0] +
                          (cfg_d[ENABLE_CIN_FABRIC_SUB0] ? internal_in[7] : internal_cin));
        internal_sum[1] = (internal_lut4[1][1] + internal_lut4[0][1] +
                          (cfg_d[ENABLE_CIN_FABRIC_SUB1] ? internal_in[7] : internal_sum[0][1]));
        internal_lut5 = internal_in[6] ? internal_lut4[1] : internal_lut4[0];
    end

    always @* begin
        internal_lut6 = internal_in[7] ? internal_lut5[1] : internal_lut5[0];
    end

    always @* begin
        if (cfg_e) begin    // avoid program-time oscillation
            out = 2'b0;
            cout = 1'b0;
        end else begin
            out[0] = (~cfg_d[DISABLE_FF_SUB0]) ? internal_ff[0] :
                     (cfg_d[DISABLE_LUT6] ? internal_lut5[0] : internal_lut6);
            out[1] = cfg_d[DISABLE_FF_SUB1] ? internal_lut5[1] : internal_ff[1];
            cout = internal_sum[1][1];
        end
    end

    {{ module.instances.i_cfg_data.model.name }} i_cfg_data (
        .cfg_clk            (cfg_clk)
        ,.cfg_e             (cfg_e)
        ,.cfg_we            (cfg_we)
        ,.cfg_i             (cfg_i)
        ,.cfg_o             (cfg_o)
        ,.cfg_d             (cfg_d)
        );

endmodule
