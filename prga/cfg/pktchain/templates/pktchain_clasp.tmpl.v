// Automatically generated by PRGA's RTL generator
{%- set cfg_width = module.cfg_width %}
`include "pktchain.vh"
module pktchain_clasp (
    input wire [0:0] cfg_clk,
    input wire [0:0] cfg_rst,

    // frame inputs
    input wire [0:0] frame_empty,
    output reg [0:0] frame_rd,
    input wire [`FRAME_SIZE - 1:0] frame_i,

    // extra control inputs
    input wire [0:0] ctrl_init,     // marks the input frame as the first frame
    input wire [0:0] ctrl_checksum, // marks the input frame as the last frame ending with CRC-8 CCITT prefix checksums

    // status outputs
    output reg [0:0] programming,
    output reg [0:0] echo_mismatch,
    output reg [0:0] checksum_mismatch,

    // chain inputs & outputs
    input wire [0:0] cfg_we_i,
    input wire [`CFG_WIDTH-1:0] cfg_i,

    output reg [0:0] cfg_we_o,
    output reg [`CFG_WIDTH-1:0] cfg_o
    );

    // data registers
    // input buffering
    reg [`FRAME_SIZE - 1:0] frame_buf;
    reg cfg_o_proceed;

    // checks
    reg [8 * `CFG_WIDTH - 1:0] echo_collected;              // echo collected
    reg [7:0] crc [`CFG_WIDTH - 1:0];                       // checksum
    
    always @(posedge cfg_clk) begin
        if (~frame_empty && frame_rd) begin
            frame_buf <= frame_i;
        end else if (cfg_o_proceed) begin
            frame_buf <= frame_buf << `CFG_WIDTH;
        end
    end

    always @(posedge cfg_clk) begin
        if (~frame_empty && frame_rd && ctrl_init) begin
            {% for i in range(cfg_width) %}
            crc[{{ i }}] <= 'b0;
            {%- endfor %}
        end else if (cfg_o_proceed) begin
            {% for i in range(cfg_width) %}
            crc[{{ i }}] <= (crc[{{ i }}] << 1) ^ (crc[{{ i }}][7] ^ cfg_o[{{ i }}] ? 8'h07 : 8'b0);
            {%- endfor %}
        end
    end

    always @(posedge cfg_clk) begin
        if (cfg_we_i) begin
            echo_collected <= {echo_collected, cfg_i};
        end
    end

    always @* begin
        cfg_o = frame_buf[`FRAME_SIZE - 1 -: `CFG_WIDTH];
    end

    {% if cfg_width not in (1, 2, 4) %}
    // The configuration chain width ({{ cfg_width }}) is unsupported (Accepted values: 1, 2, 4)
    __PRGA_RTLGEN_ERROR__ __PKTCHAIN_UNSUPPORTED_CFG_WIDTH__();
    {%- endif %}
    localparam  NUM_CFG_UNITS_PER_FRAME = `FRAME_SIZE / `CFG_WIDTH;
    localparam  UNIT_COUNTER_WIDTH = `CLOG2(NUM_CFG_UNITS_PER_FRAME);

    localparam  STATE_RESET     = 3'h0,
                STATE_IDLE      = 3'h1,
                STATE_PROG      = 3'h2,
                STATE_PAUSE     = 3'h3,
                STATE_CHECKSUM  = 3'h4;
    {%- if cfg_width < 4 %}
    localparam  STATE_PROG_LAST = 3'h7;     // this state is needed because NUM_CFG_UNITS_PER_FRAME > 8
    {%- endif %}

    reg [2:0] state, state_next;
    reg [UNIT_COUNTER_WIDTH - 1:0] unit_counter, unit_counter_next;
    reg [7:0] break_counter;
    reg cfg_we_o_prev, cfg_we_i_prev;

    always @(posedge cfg_clk) begin
        if (cfg_rst) begin
            state <= STATE_RESET;
            unit_counter <= 'b0;
            break_counter <= 'b0;
        end else begin
            state <= state_next;
            unit_counter <= unit_counter_next;

            case ({cfg_we_o && ~cfg_we_o_prev, ~cfg_we_i && cfg_we_i_prev})
                2'b10:  break_counter <= break_counter + 1;
                2'b01:  break_counter <= break_counter - 1;
            endcase
        end
    end

    always @(posedge cfg_clk) begin
        cfg_we_o_prev <= cfg_we_o;
        cfg_we_i_prev <= cfg_we_i;
    end

    always @* begin
        state_next = state;
        unit_counter_next = unit_counter;

        frame_rd = 'b0;
        cfg_we_o = 'b0;
        cfg_o_proceed = 'b0;

        case (state)
            STATE_RESET: begin
                state_next = STATE_IDLE;
            end
            STATE_IDLE,
            STATE_PAUSE: begin
                frame_rd = 'b1;

                if (~frame_empty) begin
                    if (ctrl_checksum) begin
                        {%- if cfg_width == 4 %}
                        state_next = STATE_CHECKSUM;
                        {%- else %}
                        state_next = STATE_PROG_LAST;
                        {%- endif %}
                    end else begin
                        state_next = STATE_PROG;
                    end
                end
            end
            STATE_PROG: begin
                cfg_we_o = 'b1;
                cfg_o_proceed = 'b1;

                if (unit_counter == NUM_CFG_UNITS_PER_FRAME - 1) begin
                    frame_rd = 'b1;
                    unit_counter_next = 'b0;

                    if (frame_empty) begin
                        state_next = STATE_PAUSE;
                    end else if (ctrl_checksum) begin
                        {%- if cfg_width == 4 %}
                        state_next = STATE_CHECKSUM;
                        {%- else %}
                        state_next = STATE_PROG_LAST;
                        {%- endif %}
                    end
                end else begin
                    unit_counter_next = unit_counter + 1;
                end
            end
            {%- if cfg_width < 4 %}
            STATE_PROG_LAST: begin
                cfg_we_o = 'b1;
                cfg_o_proceed = 'b1;
                unit_counter_next = unit_counter + 1;

                if (unit_counter == NUM_CFG_UNITS_PER_FRAME - 9) begin
                    state_next = STATE_CHECKSUM;
                end
            end
            {%- endif %}
            STATE_CHECKSUM: begin
                if (break_counter == 0) begin
                    unit_counter_next = 0;
                    state_next = STATE_IDLE;
                end
            end
        endcase
    end

    always @* begin
        programming = !(state == STATE_RESET || state == STATE_IDLE);
        echo_mismatch = echo_collected != frame_buf[`FRAME_SIZE - 1 -: 8 * `CFG_WIDTH];
        checksum_mismatch = |{
            {%- set crc_joiner = joiner(", ") -%}
            {%- for i in range(cfg_width) -%}
            {{ crc_joiner() }}crc[{{ i }}]
            {%- endfor -%}
        };
    end

endmodule
