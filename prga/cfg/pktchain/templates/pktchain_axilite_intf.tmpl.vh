// Automatically generated by PRGA's RTL generator
`ifndef PRGA_VH
`define PRGA_VH

`include "pktchain.vh"

`define PRGA_AXI_DATA_WIDTH_LOG2    6

`define PRGA_AXI_ADDR_WIDTH         8
`define PRGA_AXI_DATA_WIDTH         (1 << `PRGA_AXI_DATA_WIDTH_LOG2)
`define PRGA_AXI_DATA_BYTES         (1 << (`PRGA_AXI_DATA_WIDTH_LOG2 - 3))

// Controller management
`define PRGA_CREG_ADDR_STATE                `PRGA_CREG_ADDR_WIDTH'h0    // writing to this address triggers some state transition.
`define PRGA_CREG_ADDR_ERR                  `PRGA_CREG_ADDR_WIDTH'h1    // read/clear error flags

// Bitstream management
`define PRGA_CREG_ADDR_BITSTREAM_ID         `PRGA_CREG_ADDR_WIDTH'h8    // ID of the current bitstream
`define PRGA_CREG_ADDR_BITSTREAM_FIFO       `PRGA_CREG_ADDR_WIDTH'h9    // Data FIFO

// PRGA controller states
`define PRGA_STATE_WIDTH                    8
`define PRGA_STATE_RESET                    `PRGA_CREG_STATE_WIDTH'h0   // PRGA is under reset
`define PRGA_STATE_STANDBY                  `PRGA_CREG_STATE_WIDTH'h1   // PRGA not configured/being configured. Controller ready for reconfig
`define PRGA_STATE_PROGRAMMING              `PRGA_CREG_STATE_WIDTH'h2   // PRGA is being programmed

// PRGA controller error flags
`define PRGA_ERR_PROTOCOL_VIOLATION         `PRGA_AXI_DATA_WIDTH'h1     // protocol violation

`endif
