// Automatically generated by PRGA's RTL generator
module {{ module.name }} (
    // system ctrl signals
    input wire [0:0] clk,
    input wire [0:0] rst,

    // == AXI4-Lite Interface ================================================
    // write address channel
    input wire [0:0] m_AWVALID,
    output reg [0:0] m_AWREADY,
    input wire [`PRGA_AXI_ADDR_WIDTH - 1:0] m_AWADDR,
    input wire [2:0] m_AWPROT,

    // write data channel
    input wire [0:0] m_WVALID,
    output reg [0:0] m_WREADY,
    input wire [`PRGA_AXI_DATA_WIDTH - 1:0] m_WDATA,
    input wire [`PRGA_BYTES_PER_AXI_DATA - 1:0] m_WSTRB,

    // write response channel
    output reg [0:0] m_BVALID,
    input wire [0:0] m_BREADY,
    output wire [1:0] m_BRESP,

    // read address channel
    input wire [0:0] m_ARVALID,
    output reg [0:0] m_ARREADY,
    input wire [`PRGA_AXI_ADDR_WIDTH - 1:0] m_ARADDR,
    input wire [2:0] m_ARPROT,

    // read data channel
    output reg [0:0] m_RVALID,
    input wire [0:0] m_RREADY,
    output wire [`PRGA_AXI_DATA_WIDTH - 1:0] m_RDATA,
    output reg [1:0] m_RRESP,

    // == Buffered, Simplified Interface =====================================
    // write request
    output reg [0:0] wval,
    input wire [0:0] wrdy,
    output wire [`PRGA_AXI_ADDR_WIDTH - 1:0] waddr,
    output wire [`PRGA_BYTES_PER_AXI_DATA - 1:0] wstrb,
    output wire [`PRGA_AXI_DATA_WIDTH - 1:0] wdata,

    // write response (FIFO slot is pre-allocated)
    input wire [0:0] wresp,

    // read request
    output reg [0:0] rval,
    input wire [0:0] rrdy,
    output wire [`PRGA_AXI_ADDR_WIDTH - 1:0] raddr,

    // read response (FIFO slot is pre-allocated)
    input wire [0:0] rresp,
    input wire [`PRGA_AXI_DATA_WIDTH - 1:0] rdata
    );
    
    // register reset signal
    reg rst_f;

    always @(posedge clk) begin
        rst_f <= rst;
    end

    // AXI write request FIFOs
    wire axi_waddr_fifo_full, axi_waddr_fifo_empty;

    prga_fifo #(
        .DATA_WIDTH                 (`PRGA_AXI_ADDR_WIDTH)
        ,.LOOKAHEAD                 (1)
    ) axi_waddr_fifo (
        .clk                        (clk)
        ,.rst                       (rst_f)
        ,.full                      (axi_waddr_fifo_full)
        ,.wr                        (m_AWVALID)
        ,.din                       (m_AWADDR)
        ,.empty                     (axi_waddr_fifo_empty)
        ,.rd                        (wval && wrdy)
        ,.dout                      (waddr)
        );

    wire axi_wdata_fifo_full, axi_waddr_fifo_empty;

    prga_fifo #(
        .DATA_WIDTH                 (`PRGA_BYTES_PER_AXI_DATA + `PRGA_AXI_DATA_WIDTH)
        ,.LOOKAHEAD                 (1)
    ) axi_wdata_fifo (
        .clk                        (clk)
        ,.rst                       (rst_f)
        ,.full                      (axi_wdata_fifo_full)
        ,.wr                        (m_WVALID)
        ,.din                       ({m_WSTRB, m_WDATA})
        ,.empty                     (axi_wdata_fifo_empty)
        ,.rd                        (wval && wrdy)
        ,.dout                      ({wstrb, wdata})
        );

    // AXI read request FIFOs
    wire axi_raddr_fifo_full, axi_raddr_fifo_empty;
    
    prga_fifo #(
        .DATA_WIDTH                 (`PRGA_AXI_ADDR_WIDTH)
        ,.LOOKAHEAD                 (1)
    ) axi_raddr_fifo (
        .clk                        (clk)
        ,.rst                       (rst_f)
        ,.full                      (axi_raddr_fifo_full)
        ,.wr                        (m_ARVALID)
        ,.din                       (m_ARADDR)
        ,.empty                     (axi_raddr_fifo_empty)
        ,.rd                        (rval && rrdy)
        ,.dout                      (raddr)
        );

    // AXI write response FIFOs
    wire axi_wresp_fifo_full, axi_wresp_fifo_empty;

    prga_fifo #(
        .DATA_WIDTH                 (2)
        ,.LOOKAHEAD                 (1)
    ) axi_wresp_fifo (
        .clk                        (clk)
        ,.rst                       (rst_f)
        ,.full                      (axi_wresp_fifo_full)
        ,.wr                        (wresp)
        ,.din                       (2'b0)  // AXI OKAY
        ,.empty                     (axi_wresp_fifo_empty)
        ,.rd                        (m_BREADY)
        ,.dout                      (m_BRESP)
        );

    // AXI read response FIFOs
    wire axi_rresp_fifo_full, axi_rresp_fifo_empty;

    prga_fifo #(
        .DATA_WIDTH                 (`PRGA_AXI_DATA_WIDTH)
        ,.LOOKAHEAD                 (1)
    ) axi_rresp_fifo (
        .clk                        (clk)
        ,.rst                       (rst_f)
        ,.full                      (axi_rresp_fifo_full)
        ,.wr                        (rresp)
        ,.din                       (rdata)
        ,.empty                     (axi_rresp_fifo_empty)
        ,.rd                        (m_RREADY)
        ,.dout                      (m_RDATA)
        );

    always @* begin
        m_AWREADY = ~axi_waddr_fifo_full;
        m_WREADY = ~axi_wdata_fifo_full;
        m_BVALID = ~axi_wresp_fifo_empty;
        m_ARREADY = ~axi_raddr_fifo_full;
        m_RVALID = ~axi_rdata_fifo_empty;
        m_RRESP = 2'b0;         // AXI OKAY

        wval = ~axi_waddr_fifo_empty && ~axi_wdata_fifo_empty && ~axi_wresp_fifo_full;
        rval = ~axi_raddr_fifo_empty && ~axi_rdata_fifo_full;
    end

endmodule
