// Automatically generated by PRGA's RTL generator
`include "pktchain_axilite_intf.vh"
// Master channel timer
module pktchain_axilite_intf_mch_timer #(
    parameter   DATA_WIDTH = 32
) (
    // system ctrl signals
    input wire [0:0] clk,
    input wire [0:0] rst,

    // == Upstream Interface =================================================
    input wire [0:0] val_i,
    output reg [0:0] rdy_o,
    input wire [DATA_WIDTH - 1:0] data_i,

    // timeout
    input wire [`PRGA_TIMER_WIDTH - 1:0] timeout_limit,
    output reg [0:0] timeout_o, // report if the previous transaction timed out

    // other config
    input wire [0:0] enable_rdy_bypass,

    // == Downstream Interface ===============================================
    input wire [0:0] rdy_i,
    output reg [0:0] val_o,
    output reg [DATA_WIDTH - 1:0] data_o
    );

    reg [`PRGA_TIMER_WIDTH - 1:0] timer;

    always @(posedge clk) begin
        if (rst) begin
            timer <= 'b0;
            timeout_o <= 'b0;
            val_o <= 'b0;
            data_o <= 'b0;
        end else begin
            if (val_i && rdy_o) begin
                timer <= timeout_limit;
                val_o <= 'b1;
                data_o <= data_i;
                timeout_o <= 'b0;
            end else if (val_o) begin
                if (rdy_i) begin
                    val_o <= 'b0;
                    timeout_o <= 'b0;
                end else if (timer == 0) begin
                    val_o <= 'b0;
                    timeout_o <= 'b1;
                end else begin
                    timer <= timer - 1;
                end
            end
        end
    end

    always @* begin
        rdy_o = ~rst && (~val_o || (enable_rdy_bypass && rdy_i));
    end

endmodule
