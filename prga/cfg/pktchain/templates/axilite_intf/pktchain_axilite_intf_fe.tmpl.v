// Automatically generated by PRGA's RTL generator
`timescale 1ns/1ps
module pktchain_axilite_intf_fe (
    // system ctrl signals
    input wire [0:0] clk,
    input wire [0:0] rst,

    // == AXI4-Lite Interface ================================================
    // write address channel
    input wire [0:0] m_AWVALID,
    output reg [0:0] m_AWREADY,
    input wire [`PRGA_AXI_ADDR_WIDTH - 1:0] m_AWADDR,
    input wire [2:0] m_AWPROT,

    // write data channel
    input wire [0:0] m_WVALID,
    output reg [0:0] m_WREADY,
    input wire [`PRGA_AXI_DATA_WIDTH - 1:0] m_WDATA,
    input wire [`PRGA_BYTES_PER_AXI_DATA - 1:0] m_WSTRB,

    // write response channel
    output reg [0:0] m_BVALID,
    input wire [0:0] m_BREADY,
    output reg [1:0] m_BRESP,

    // read address channel
    input wire [0:0] m_ARVALID,
    output reg [0:0] m_ARREADY,
    input wire [`PRGA_AXI_ADDR_WIDTH - 1:0] m_ARADDR,
    input wire [2:0] m_ARPROT,

    // read data channel
    output reg [0:0] m_RVALID,
    input wire [0:0] m_RREADY,
    output wire [`PRGA_AXI_DATA_WIDTH - 1:0] m_RDATA,
    output reg [1:0] m_RRESP,

    // == Buffered, Simplified Interface =====================================
    // write request
    output reg [0:0] wreq_val,
    input wire [0:0] wreq_rdy,
    output wire [`PRGA_AXI_ADDR_WIDTH - 1:0] wreq_addr,
    output wire [`PRGA_BYTES_PER_AXI_DATA - 1:0] wreq_strb,
    output wire [`PRGA_AXI_DATA_WIDTH - 1:0] wreq_data,

    // write response
    output reg [0:0] wresp_rdy,
    input wire [0:0] wresp_val,

    // read request
    output reg [0:0] rreq_val,
    input wire [0:0] rreq_rdy,
    output wire [`PRGA_AXI_ADDR_WIDTH - 1:0] rreq_addr,

    // read response
    output reg [0:0] rresp_rdy,
    input wire [0:0] rresp_val,
    input wire [`PRGA_AXI_DATA_WIDTH - 1:0] rresp_data
    );

    // AXI write request FIFOs
    wire axi_waddr_fifo_full, axi_waddr_fifo_empty;

    prga_fifo #(
        .DATA_WIDTH                 (`PRGA_AXI_ADDR_WIDTH)
        ,.LOOKAHEAD                 (1)
    ) axi_waddr_fifo (
        .clk                        (clk)
        ,.rst                       (rst)
        ,.full                      (axi_waddr_fifo_full)
        ,.wr                        (m_AWVALID)
        ,.din                       (m_AWADDR)
        ,.empty                     (axi_waddr_fifo_empty)
        ,.rd                        (wreq_val && wreq_rdy)
        ,.dout                      (wreq_addr)
        );

    wire axi_wdata_fifo_full, axi_wdata_fifo_empty;

    prga_fifo #(
        .DATA_WIDTH                 (`PRGA_BYTES_PER_AXI_DATA + `PRGA_AXI_DATA_WIDTH)
        ,.LOOKAHEAD                 (1)
    ) axi_wdata_fifo (
        .clk                        (clk)
        ,.rst                       (rst)
        ,.full                      (axi_wdata_fifo_full)
        ,.wr                        (m_WVALID)
        ,.din                       ({m_WSTRB, m_WDATA})
        ,.empty                     (axi_wdata_fifo_empty)
        ,.rd                        (wreq_val && wreq_rdy)
        ,.dout                      ({wreq_strb, wreq_data})
        );

    // AXI read request FIFOs
    wire axi_raddr_fifo_full, axi_raddr_fifo_empty;
    
    prga_fifo #(
        .DATA_WIDTH                 (`PRGA_AXI_ADDR_WIDTH)
        ,.LOOKAHEAD                 (1)
    ) axi_raddr_fifo (
        .clk                        (clk)
        ,.rst                       (rst)
        ,.full                      (axi_raddr_fifo_full)
        ,.wr                        (m_ARVALID)
        ,.din                       (m_ARADDR)
        ,.empty                     (axi_raddr_fifo_empty)
        ,.rd                        (rreq_val && rreq_rdy)
        ,.dout                      (rreq_addr)
        );

    // AXI write response FIFOs
    wire axi_wresp_fifo_full, axi_wresp_fifo_empty;

    prga_tokenfifo axi_wresp_fifo (
        .clk                        (clk)
        ,.rst                       (rst)
        ,.full                      (axi_wresp_fifo_full)
        ,.wr                        (wresp_val && wresp_rdy)
        ,.empty                     (axi_wresp_fifo_empty)
        ,.rd                        (m_BREADY)
        );

    // AXI read response FIFOs
    wire axi_rresp_fifo_full, axi_rresp_fifo_empty;

    prga_fifo #(
        .DATA_WIDTH                 (`PRGA_AXI_DATA_WIDTH)
        ,.LOOKAHEAD                 (1)
    ) axi_rresp_fifo (
        .clk                        (clk)
        ,.rst                       (rst)
        ,.full                      (axi_rresp_fifo_full)
        ,.wr                        (rresp_val && rresp_rdy)
        ,.din                       (rresp_data)
        ,.empty                     (axi_rresp_fifo_empty)
        ,.rd                        (m_RREADY)
        ,.dout                      (m_RDATA)
        );

    always @* begin
        m_AWREADY = ~axi_waddr_fifo_full;
        m_WREADY = ~axi_wdata_fifo_full;
        m_BVALID = ~axi_wresp_fifo_empty;
        m_BRESP = 2'b0;         // AXI OKAY
        m_ARREADY = ~axi_raddr_fifo_full;
        m_RVALID = ~axi_rresp_fifo_empty;
        m_RRESP = 2'b0;         // AXI OKAY

        wreq_val = ~axi_waddr_fifo_empty && ~axi_wdata_fifo_empty;
        wresp_rdy = ~axi_wresp_fifo_full;
        rreq_val = ~axi_raddr_fifo_empty;
        rresp_rdy = ~axi_rresp_fifo_full;
    end

endmodule
