// Automatically generated by PRGA's RTL generator
`include "pktchain.vh"
module pktchain_dispatcher (
    input wire [0:0] cfg_clk,
    input wire [0:0] cfg_rst,

    // noc inputs
    output wire [0:0] phit_i_full,
    input wire [0:0] phit_i_wr,
    input wire [`PHIT_WIDTH - 1:0] phit_i,

    // noc outputs
    input wire [0:0] phit_ox_full,
    output wire [0:0] phit_ox_wr,
    output wire [`PHIT_WIDTH - 1:0] phit_ox,

    input wire [0:0] phit_oy_full,
    output wire [0:0] phit_oy_wr,
    output wire [`PHIT_WIDTH - 1:0] phit_oy
    );

    wire frame_i_empty, frame_ox_full, frame_oy_full;
    wire [`FRAME_SIZE - 1:0] frame_i;
    reg [`FRAME_SIZE - 1:0] frame_ox;
    reg frame_i_rd, frame_ox_wr, frame_oy_wr;

    pktchain_frame_assemble ififo (
        .cfg_clk        (cfg_clk)
        ,.cfg_rst       (cfg_rst)
        ,.phit_full     (phit_i_full)
        ,.phit_wr       (phit_i_wr)
        ,.phit_i        (phit_i)
        ,.frame_empty   (frame_i_empty)
        ,.frame_rd      (frame_i_rd)
        ,.frame_o       (frame_i)
        );

    pktchain_frame_disassemble ox (
        .cfg_clk        (cfg_clk)
        ,.cfg_rst       (cfg_rst)
        ,.frame_full    (frame_ox_full)
        ,.frame_wr      (frame_ox_wr)
        ,.frame_i       (frame_ox)
        ,.phit_full     (phit_ox_full)
        ,.phit_wr       (phit_ox_wr)
        ,.phit_o        (phit_ox)
        );

    pktchain_frame_disassemble #(
        .DEPTH_LOG2     (6)  // increased Y-dimension buffering capability
    ) oy (  
        .cfg_clk        (cfg_clk)
        ,.cfg_rst       (cfg_rst)
        ,.frame_full    (frame_oy_full)
        ,.frame_wr      (frame_oy_wr)
        ,.frame_i       (frame_i)
        ,.phit_full     (phit_oy_full)
        ,.phit_wr       (phit_oy_wr)
        ,.phit_o        (phit_oy)
        );

    localparam  STATE_RESET                         = 4'h0,
                STATE_IDLE                          = 4'h1,
                STATE_FORWARD_X                     = 4'h2,
                STATE_FORWARD_Y                     = 4'h3;

    reg [3:0] state, state_next;
    reg [`PAYLOAD_WIDTH - 1:0] payload;
    reg payload_rst;

    always @(posedge cfg_clk or posedge cfg_rst) begin
        if (cfg_rst) begin
            state <= STATE_RESET;
            payload <= 'b0;
        end else begin
            state <= state_next;

            if (payload_rst) begin
                payload <= frame_i[`PAYLOAD_INDEX];
            end else if (!frame_i_empty && frame_i_rd) begin
                payload <= payload - 1;
            end
        end
    end

    always @* begin
        frame_i_rd = 'b0;
        frame_ox = frame_i;
        frame_ox_wr = 'b0;
        frame_oy_wr = 'b0;
        state_next = state;
        payload_rst = 'b0;

        case (state)
            STATE_RESET: begin
                state_next = STATE_IDLE;
            end
            STATE_IDLE: begin
                if (!frame_i_empty) begin
                    if (frame_i[`XPOS_INDEX] == 0) begin
                        frame_oy_wr = 'b1;
                        payload_rst = 'b1;

                        if (!frame_oy_full) begin
                            frame_i_rd = 'b1;

                            if (frame_i[`PAYLOAD_INDEX] > 0) begin
                                state_next = STATE_FORWARD_Y;
                            end
                        end
                    end else begin
                        frame_ox = frame_i - (1 << `XPOS_BASE);
                        frame_ox_wr = 'b1;
                        payload_rst = 'b1;

                        if (!frame_ox_full) begin
                            frame_i_rd = 'b1;

                            if (frame_i[`PAYLOAD_INDEX] > 0) begin
                                state_next = STATE_FORWARD_X;
                            end
                        end
                    end
                end
            end
            STATE_FORWARD_X: begin
                frame_i_rd = !frame_ox_full;
                frame_ox_wr = !frame_i_empty;

                if (payload == 1 && !frame_i_empty && !frame_ox_full) begin
                    state_next = STATE_IDLE;
                end
            end
            STATE_FORWARD_Y: begin
                frame_i_rd = !frame_oy_full;
                frame_oy_wr = !frame_i_empty;

                if (payload == 1 && !frame_i_empty && !frame_oy_full) begin
                    state_next = STATE_IDLE;
                end
            end
        endcase
    end

endmodule
