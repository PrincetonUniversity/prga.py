// Automatically generated by PRGA's RTL generator
`include "pktchain.vh"
module pktchain_gatherer (
    input wire [0:0] cfg_clk,
    input wire [0:0] cfg_rst,

    // noc inputs
    output wire [0:0] phit_ix_full,
    input wire [0:0] phit_ix_wr,
    input wire [`PHIT_WIDTH - 1:0] phit_ix,

    output wire [0:0] phit_iy_full,
    input wire [0:0] phit_iy_wr,
    input wire [`PHIT_WIDTH - 1:0] phit_iy,

    // noc outputs
    input wire [0:0] phit_o_full,
    output wire [0:0] phit_o_wr,
    output wire [`PHIT_WIDTH - 1:0] phit_o
    );

    wire frame_ix_empty, frame_iy_empty, frame_o_full;
    wire [`FRAME_SIZE - 1:0] frame_ix, frame_iy;
    reg [`FRAME_SIZE - 1:0] frame_o;
    reg frame_ix_rd, frame_iy_rd, frame_o_wr;

    pktchain_frame_assemble ix (
        .cfg_clk        (cfg_clk)
        ,.cfg_rst       (cfg_rst)
        ,.phit_full     (phit_ix_full)
        ,.phit_wr       (phit_ix_wr)
        ,.phit_i        (phit_ix)
        ,.frame_empty   (frame_ix_empty)
        ,.frame_rd      (frame_ix_rd)
        ,.frame_o       (frame_ix)
        );

    pktchain_frame_assemble iy (
        .cfg_clk        (cfg_clk)
        ,.cfg_rst       (cfg_rst)
        ,.phit_full     (phit_iy_full)
        ,.phit_wr       (phit_iy_wr)
        ,.phit_i        (phit_iy)
        ,.frame_empty   (frame_iy_empty)
        ,.frame_rd      (frame_iy_rd)
        ,.frame_o       (frame_iy)
        );

    pktchain_frame_disassemble ofifo (
        .cfg_clk        (cfg_clk)
        ,.cfg_rst       (cfg_rst)
        ,.frame_full    (frame_o_full)
        ,.frame_wr      (frame_o_wr)
        ,.frame_i       (frame_o)
        ,.phit_full     (phit_o_full)
        ,.phit_wr       (phit_o_wr)
        ,.phit_o        (phit_o)
        );

    localparam  STATE_RESET                         = 4'h0,
                STATE_IDLE                          = 4'h1,
                STATE_FORWARD_X                     = 4'h2,
                STATE_FORWARD_Y                     = 4'h3;

    reg [3:0] state, state_next;
    reg [`PAYLOAD_WIDTH - 1:0] payload;
    reg payload_rst;

    always @(posedge cfg_clk or posedge cfg_rst) begin
        if (cfg_rst) begin
            state <= STATE_RESET;
            payload <= 'b0;
        end else begin
            state <= state_next;

            if (payload_rst) begin
                payload <= frame_o[`PAYLOAD_INDEX];
            end else if (!frame_o_full && frame_o_wr) begin
                payload <= payload - 1;
            end
        end
    end

    always @* begin
        frame_o = frame_ix;
        frame_ix_rd = 'b0;
        frame_iy_rd = 'b0;
        frame_o_wr = 'b0;
        state_next = state;
        payload_rst = 'b0;

        case (state)
            STATE_RESET: begin
                state_next = STATE_IDLE;
            end
            STATE_IDLE: begin
                if (!frame_ix_empty) begin
                    frame_o = frame_ix + (1 << `XPOS_BASE);
                    frame_o_wr = 'b1;
                    payload_rst = 'b1;
                    
                    if (!frame_o_full) begin
                        frame_ix_rd = 'b1;

                        if (frame_ix[`PAYLOAD_INDEX] > 0) begin
                            state_next = STATE_FORWARD_X;
                        end
                    end
                end else if (!frame_iy_empty) begin
                    frame_o = frame_iy;
                    frame_o_wr = 'b1;
                    payload_rst = 'b1;
                    
                    if (!frame_o_full) begin
                        frame_iy_rd = 'b1;

                        if (frame_iy[`PAYLOAD_INDEX] > 0) begin
                            state_next = STATE_FORWARD_Y;
                        end
                    end
                end
            end
            STATE_FORWARD_X: begin
                frame_ix_rd = !frame_o_full;
                frame_o_wr = !frame_ix_empty;

                if (payload == 1 && !frame_ix_empty && !frame_o_full) begin
                    state_next = STATE_IDLE;
                end
            end
            STATE_FORWARD_Y: begin
                frame_iy_rd = !frame_o_full;
                frame_o_wr = !frame_iy_empty;

                if (payload == 1 && !frame_iy_empty && !frame_o_full) begin
                    state_next = STATE_IDLE;
                end
            end
        endcase
    end

endmodule
