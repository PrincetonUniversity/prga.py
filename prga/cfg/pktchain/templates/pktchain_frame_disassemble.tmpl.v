// Automatically generated by PRGA's RTL generator
`include "pktchain.vh"
module pktchain_frame_disassemble #(
    parameter DEPTH_LOG2 = 1,
    parameter DATA_WIDTH_LOG2 = `FRAME_SIZE_LOG2
) (
    input wire [0:0] cfg_clk,
    input wire [0:0] cfg_rst,

    output reg [0:0] frame_full,
    input wire [0:0] frame_wr,
    input wire [(1 << DATA_WIDTH_LOG2) - 1:0] frame_i,

    output reg [0:0] phit_wr,
    input wire [0:0] phit_full,
    output reg [`PHIT_WIDTH - 1:0] phit_o
    );

    localparam  PHIT_COUNTER_LOG2 = DATA_WIDTH_LOG2 - `PHIT_WIDTH_LOG2;
    localparam  FIFO_COUNTER_LOG2 = DEPTH_LOG2 + PHIT_COUNTER_LOG2;
    localparam  FIFO_DEPTH = 1 << FIFO_COUNTER_LOG2;

    reg [`PHIT_WIDTH - 1:0] data [FIFO_DEPTH - 1:0];
    reg [FIFO_COUNTER_LOG2:0] wr_ptr, rd_ptr;

    always @(posedge cfg_clk or posedge cfg_rst) begin
        if (cfg_rst) begin
            wr_ptr <= 'b0;
            rd_ptr <= 'b0;
        end else begin
            if (~frame_full && frame_wr) begin
                wr_ptr <= wr_ptr + (1 << PHIT_COUNTER_LOG2);
            end

            if (~phit_full && phit_wr) begin
                rd_ptr <= rd_ptr + 1;
            end
        end
    end

    genvar i;
    generate for (i = 0; i < (1 << PHIT_COUNTER_LOG2); i = i + 1) begin: frame_assemble
        always @(posedge cfg_clk) begin
            if (~cfg_rst && ~frame_full && frame_wr) begin
                data[wr_ptr + i] <= frame_i[((1 << PHIT_COUNTER_LOG2) - i - 1) * `PHIT_WIDTH +: `PHIT_WIDTH];
            end
        end
    end endgenerate

    always @* begin
        frame_full = cfg_rst || rd_ptr == {~wr_ptr[FIFO_COUNTER_LOG2], wr_ptr[0 +: FIFO_COUNTER_LOG2]};
        phit_wr = cfg_rst || rd_ptr != wr_ptr;
        phit_o = data[rd_ptr[0 +: FIFO_COUNTER_LOG2]];
    end

endmodule
