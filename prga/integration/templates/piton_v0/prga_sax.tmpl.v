// Automatically generated by PRGA's RTL generator
`timescale 1ns/1ps

/*
* System-Application Clock-Domain-Crossing Interconnect.
*/

`include "prga_system.vh"

module prga_sax (
    // == System Clock Domain ================================================
    input wire                                  clk,
    input wire                                  rst_n,

    // -- CTRL <-> SAX -------------------------------------------------------
    output reg                                  sax_ctrl_rdy,
    input wire                                  ctrl_sax_val,
    input wire [`PRGA_SAX_DATA_WIDTH-1:0]       ctrl_sax_data,

    input wire                                  ctrl_asx_rdy,
    output reg                                  asx_ctrl_val,
    output reg [`PRGA_ASX_DATA_WIDTH-1:0]       asx_ctrl_data,

    // -- CCM Transducer <-> SAX ---------------------------------------------
    output reg                                  sax_transducer_rdy,
    input wire                                  transducer_sax_val,
    input wire [`PRGA_SAX_DATA_WIDTH-1:0]       transducer_sax_data,

    input wire                                  transducer_asx_rdy,
    output reg                                  asx_transducer_val,
    output reg [`PRGA_ASX_DATA_WIDTH-1:0]       asx_transducer_data,

    // == Application Clock Domain ===========================================
    input wire                                  aclk,
    input wire                                  arst_n,

    // -- UPROT <-> SAX ------------------------------------------------------
    output reg                                  asx_uprot_rdy,
    input wire                                  uprot_asx_val,
    input wire [`PRGA_ASX_DATA_WIDTH-1:0]       uprot_asx_data,

    input wire                                  uprot_sax_rdy,
    output reg                                  sax_uprot_val,
    output reg [`PRGA_SAX_DATA_WIDTH-1:0]       sax_uprot_data,

    // -- MPROT <-> SAX ------------------------------------------------------
    output reg                                  asx_mprot_rdy,
    input wire                                  mprot_asx_val,
    input wire [`PRGA_ASX_DATA_WIDTH-1:0]       mprot_asx_data,

    input wire                                  mprot_sax_rdy,
    output reg                                  sax_mprot_val,
    output reg [`PRGA_SAX_DATA_WIDTH-1:0]       sax_mprot_data
    );

    // =======================================================================
    // -- CDC FIFO Instances -------------------------------------------------
    // =======================================================================

    wire sax_fifo_full, sax_fifo_empty;
    reg sax_fifo_wr, sax_fifo_rd;
    wire [`PRGA_SAX_DATA_WIDTH-1:0] sax_fifo_dout;
    reg [`PRGA_SAX_DATA_WIDTH-1:0] sax_fifo_din;

    prga_async_fifo #(
        .DEPTH_LOG2                             (6)
        ,.DATA_WIDTH                            (`PRGA_SAX_DATA_WIDTH)
        ,.LOOKAHEAD                             (1)
    ) i_sax_fifo (
        .wclk                                   (clk)
        ,.wrst                                  (~rst_n)
        ,.full                                  (sax_fifo_full)
        ,.wr                                    (sax_fifo_wr)
        ,.din                                   (sax_fifo_din)
        ,.rclk                                  (aclk)
        ,.rrst                                  (~arst_n)
        ,.empty                                 (sax_fifo_empty)
        ,.rd                                    (sax_fifo_rd)
        ,.dout                                  (sax_fifo_dout)
        );

    wire asx_fifo_full, asx_fifo_empty;
    reg asx_fifo_wr, asx_fifo_rd;
    wire [`PRGA_ASX_DATA_WIDTH-1:0] asx_fifo_dout;
    reg [`PRGA_ASX_DATA_WIDTH-1:0] asx_fifo_din;

    prga_async_fifo #(
        .DEPTH_LOG2                             (6)
        ,.DATA_WIDTH                            (`PRGA_ASX_DATA_WIDTH)
        ,.LOOKAHEAD                             (1)
    ) i_asx_fifo (
        .wclk                                   (aclk)
        ,.wrst                                  (~arst_n)
        ,.full                                  (asx_fifo_full)
        ,.wr                                    (asx_fifo_wr)
        ,.din                                   (asx_fifo_din)
        ,.rclk                                  (clk)
        ,.rrst                                  (~rst_n)
        ,.empty                                 (asx_fifo_empty)
        ,.rd                                    (asx_fifo_rd)
        ,.dout                                  (asx_fifo_dout)
        );

    // =======================================================================
    // -- System Clock Domain ------------------------------------------------
    // =======================================================================

    localparam  TRANSDUCER  = 1'b0,
                CTRL        = 1'b1;

    // == SAX Push ===========================================================
    reg sax_arb, sax_used_by_f;

    always @(posedge clk) begin
        if (~rst_n) begin
            sax_used_by_f       <= TRANSDUCER;
        end else if (~sax_fifo_full && sax_fifo_wr) begin
            sax_used_by_f       <= sax_arb;
        end
    end

    always @* begin
        sax_ctrl_rdy = 1'b0;
        sax_transducer_rdy = 1'b0;
        sax_fifo_wr = 1'b0;
        sax_fifo_din = {`PRGA_SAX_DATA_WIDTH {1'b0} };
        sax_arb = TRANSDUCER;

        if (~sax_fifo_full) begin
            case ({ctrl_sax_val, transducer_sax_val, sax_used_by_f})
                {2'b10, TRANSDUCER},
                {2'b10, CTRL},
                {2'b11, TRANSDUCER}: begin
                    sax_ctrl_rdy = 1'b1;
                    sax_fifo_wr = 1'b1;
                    sax_fifo_din = ctrl_sax_data;
                    sax_arb = CTRL;
                end
                {2'b01, TRANSDUCER},
                {2'b01, CTRL},
                {2'b11, CTRL}: begin
                    sax_transducer_rdy = 1'b1;
                    sax_fifo_wr = 1'b1;
                    sax_fifo_din = transducer_sax_data;
                    sax_arb = TRANSDUCER;
                end
            endcase
        end
    end

    // == ASX Pop ============================================================
    reg asx_dst;

    always @(posedge clk) begin
        if (~rst_n) begin
            asx_ctrl_val                <= 1'b0;
            asx_ctrl_data               <= {`PRGA_ASX_DATA_WIDTH {1'b0} };
            asx_transducer_val          <= 1'b0;
            asx_transducer_data         <= {`PRGA_ASX_DATA_WIDTH {1'b0} };
        end else begin
            if (~asx_ctrl_val || ctrl_asx_rdy) begin
                if (~asx_fifo_empty && asx_dst == CTRL) begin
                    asx_ctrl_val        <= 1'b1;
                    asx_ctrl_data       <= asx_fifo_dout;
                end else begin
                    asx_ctrl_val        <= 1'b0;
                end
            end

            if (~asx_transducer_val || transducer_asx_rdy) begin
                if (~asx_fifo_empty && asx_dst == TRANSDUCER) begin
                    asx_transducer_val  <= 1'b1;
                    asx_transducer_data <= asx_fifo_dout;
                end else begin
                    asx_transducer_val  <= 1'b0;
                end
            end
        end
    end

    always @* begin
        asx_fifo_rd = 1'b0;
        asx_dst = TRANSDUCER;

        if (~asx_fifo_empty) begin
            case (asx_fifo_dout[`PRGA_ASX_MSGTYPE_INDEX])
                `PRGA_ASX_MSGTYPE_CCM_LOAD,
                `PRGA_ASX_MSGTYPE_CCM_LOAD_NC,
                `PRGA_ASX_MSGTYPE_CCM_STORE,
                `PRGA_ASX_MSGTYPE_CCM_STORE_NC,
                `PRGA_ASX_MSGTYPE_CCM_AMO: begin
                    asx_dst = TRANSDUCER;
                    asx_fifo_rd = ~asx_transducer_val || transducer_asx_rdy;
                end
                `PRGA_ASX_MSGTYPE_CREG_READ_ACK,
                `PRGA_ASX_MSGTYPE_CREG_WRITE_ACK,
                `PRGA_ASX_MSGTYPE_ERR: begin
                    asx_dst = CTRL;
                    asx_fifo_rd = ~asx_ctrl_val || ctrl_asx_rdy;
                end
            endcase
        end
    end

    // =======================================================================
    // -- Application Clock Domain -------------------------------------------
    // =======================================================================

    localparam  MPROT   = 1'b0,
                UPROT   = 1'b1;

    // == ASX Push ===========================================================
    reg asx_arb, asx_used_by_f;

    always @(posedge aclk) begin
        if (~arst_n) begin
            asx_used_by_f       <= MPROT;
        end else if (~asx_fifo_full && asx_fifo_wr) begin
            asx_used_by_f       <= asx_arb;
        end
    end

    always @* begin
        asx_mprot_rdy = 1'b0;
        asx_uprot_rdy = 1'b0;
        asx_fifo_wr = 1'b0;
        asx_fifo_din = {`PRGA_ASX_DATA_WIDTH {1'b0} };
        asx_arb = MPROT;

        if (~asx_fifo_full) begin
            case ({mprot_asx_val, uprot_asx_val, asx_used_by_f})
                {2'b10, MPROT},
                {2'b10, UPROT},
                {2'b11, UPROT}: begin
                    asx_mprot_rdy = 1'b1;
                    asx_fifo_wr = 1'b1;
                    asx_fifo_din = mprot_asx_data;
                    asx_arb = MPROT;
                end
                {2'b01, MPROT},
                {2'b01, UPROT},
                {2'b11, MPROT}: begin
                    asx_uprot_rdy = 1'b1;
                    asx_fifo_wr = 1'b1;
                    asx_fifo_din = uprot_asx_data;
                    asx_arb = UPROT;
                end
            endcase
        end
    end

    // == SAX Pop ============================================================
    reg sax_dst;

    always @(posedge aclk) begin
        if (~arst_n) begin
            sax_mprot_val       <= 1'b0;
            sax_mprot_data      <= {`PRGA_SAX_DATA_WIDTH {1'b0} };
            sax_uprot_val       <= 1'b0;
            sax_uprot_data      <= {`PRGA_SAX_DATA_WIDTH {1'b0} };
        end else begin
            if (~sax_mprot_val || mprot_sax_rdy) begin
                if (~sax_fifo_empty && sax_dst == MPROT) begin
                    sax_mprot_val   <= 1'b1;
                    sax_mprot_data  <= sax_fifo_dout;
                end else begin
                    sax_mprot_val   <= 1'b0;
                end
            end

            if (~sax_uprot_val || uprot_sax_rdy) begin
                if (~sax_fifo_empty && sax_dst == UPROT) begin
                    sax_uprot_val   <= 1'b1;
                    sax_uprot_data  <= sax_fifo_dout;
                end else begin
                    sax_uprot_val   <= 1'b0;
                end
            end
        end
    end

    always @* begin
        sax_dst = MPROT;
        sax_fifo_rd = 1'b0;

        if (~sax_fifo_empty) begin
            case (sax_fifo_dout[`PRGA_SAX_MSGTYPE_INDEX])
                `PRGA_SAX_MSGTYPE_CCM_LOAD_ACK,
                `PRGA_SAX_MSGTYPE_CCM_LOAD_NC_ACK,
                `PRGA_SAX_MSGTYPE_CCM_STORE_ACK,
                `PRGA_SAX_MSGTYPE_CCM_STORE_NC_ACK,
                `PRGA_SAX_MSGTYPE_CCM_AMO_ACK: begin
                    sax_dst = MPROT;
                    sax_fifo_rd = ~sax_mprot_val || mprot_sax_rdy;
                end
                `PRGA_SAX_MSGTYPE_CREG_READ,
                `PRGA_SAX_MSGTYPE_CREG_WRITE: begin
                    sax_dst = UPROT;
                    sax_fifo_rd = ~sax_uprot_val || uprot_sax_rdy;
                end
            endcase
        end
    end

endmodule
