// Automatically generated by PRGA's RTL generator

`include "prga_rxi.vh"
`include "prga_axi4.vh"
`default_nettype none

module prga_rxi_axi4lite_transducer #(
    parameter   PRQ_DEPTH_LOG2  = 6
) (
    // system ctrl signals
    input wire                                  clk,
    input wire                                  rst_n,

    // == AXI4-Lite Interface ================================================
    // write address channel
    input wire                                  a4l_awvalid,
    output wire                                 a4l_awready,
    input wire [`PRGA_RXI_ADDR_WIDTH - 1:0]     a4l_awaddr,
    input wire [`PRGA_AXI4_AXPROT_WIDTH - 1:0]  a4l_awprot,

    // write data channel
    input wire                                  a4l_wvalid,
    output wire                                 a4l_wready,
    input wire [`PRGA_RXI_DATA_WIDTH - 1:0]     a4l_wdata,
    input wire [`PRGA_RXI_DATA_BYTES - 1:0]     a4l_wstrb,

    // write response channel
    output wire                                 a4l_bvalid,
    input wire                                  a4l_bready,
    output wire [`PRGA_AXI4_XRESP_WIDTH - 1:0]  a4l_bresp,

    // read address channel
    input wire                                  a4l_arvalid,
    output wire                                 a4l_arready,
    input wire [`PRGA_RXI_ADDR_WIDTH - 1:0]     a4l_araddr,
    input wire [`PRGA_AXI4_AXPROT_WIDTH - 1:0]  a4l_arprot,

    // read data channel
    output wire                                 a4l_rvalid,
    input wire                                  a4l_rready,
    output wire [`PRGA_RXI_DATA_WIDTH - 1:0]    a4l_rdata,
    output wire [`PRGA_AXI4_AXPROT_WIDTH - 1:0] a4l_rresp,

    // == RXI Interface ======================================================
    , input wire                                rxi_req_rdy
    , output wire                               rxi_req_vld
    , output wire [`PRGA_RXI_ADDR_WIDTH - 1:0]  rxi_req_addr
    , output wire [`PRGA_RXI_DATA_BYTES - 1:0]  rxi_req_strb
    , output wire [`PRGA_RXI_DATA_WIDTH - 1:0]  rxi_req_data

    , output wire                               rxi_resp_rdy
    , input wire                                rxi_resp_vld
    , input wire [`PRGA_RXI_DATA_WIDTH - 1:0]   rxi_resp_data
    );

    // -- AR/AW arbitration --
    wire arb_ar_awn;    // arbitration: accept AR, not AW

    prga_arb_robinfair #(
        .INDEX_WIDTH    (1)
    ) i_arb (
        .clk                (clk)
        ,.rst_n             (rst_n)
        ,.ce                (arb_ar_awn ? a4l_arready : a4l_awready)
        ,.candidates        ({(a4l_awvalid & a4l_wvalid), a4l_arvalid})
        ,.current           (arb_ar_awn)
        );

    // -- pending response queue --
    wire                                    prq_rd, prq_wr;
    wire                                    prq_full, prq_empty;
    wire                                    prq_arb_ar_awn;
    wire [`PRGA_RXI_DATA_BYTES_LOG2 - 1:0]  prq_dout, prq_din;

    prga_fifo #(
        .DEPTH_LOG2         (PRQ_DEPTH_LOG2)
        ,.DATA_WIDTH        (`PRGA_RXI_DATA_BYTES_LOG2 + 1)
        ,.LOOKAHEAD         (1)
    ) i_lraq (
        .clk                (clk)
        ,.rst               (~rst_n)
        ,.full              (prq_full)
        ,.wr                (prq_wr)
        ,.din               ({arb_ar_awn, prq_din})
        ,.empty             (prq_empty)
        ,.rd                (prq_rd)
        ,.dout              ({prq_arb_ar_awn, prq_dout})
        );

    // -- RXI request --
    assign rxi_req_vld = arb_ar_awn ? (a4l_arvalid && !prq_full) :
                                      (a4l_awvalid && a4l_wvalid && !prq_full);
    assign rxi_req_addr = arb_ar_awn ? {a4l_araddr[`PRGA_RXI_ADDR_WIDTH - 1:`PRGA_RXI_DATA_BYTES_LOG2], 3'b0} :
                                       {a4l_awaddr[`PRGA_RXI_ADDR_WIDTH - 1:`PRGA_RXI_DATA_BYTES_LOG2], 3'b0};
    assign rxi_req_strb = arb_ar_awn ? { `PRGA_RXI_DATA_BYTES {1'b0} } :
                                       (a4l_wstrb << a4l_awaddr[0 +: `PRGA_RXI_DATA_BYTES_LOG2]);
    assign rxi_req_data = a4l_wdata << {a4l_awaddr[0 +: `PRGA_RXI_DATA_BYTES_LOG2], 3'b0};
    assign prq_wr = arb_ar_awn ? a4l_arvalid : (a4l_awvalid && a4l_wvalid);
    assign prq_din = a4l_araddr[0 +: `PRGA_RXI_DATA_BYTES_LOG2];
    assign a4l_arready = arb_ar_awn && !prq_full;
    assign a4l_awready = ~arb_ar_awn && a4l_wvalid && !prq_full;
    assign a4l_wready = ~arb_ar_awn && a4l_awvalid && !prq_full;

    // -- RXI response --
    assign a4l_bvalid = !prq_empty && !prq_arb_ar_awn && rxi_resp_vld;
    assign a4l_bresp = `PRGA_AXI4_XRESP_OKAY;
    assign a4l_rvalid = !prq_empty && prq_arb_ar_awn && rxi_resp_vld;
    assign a4l_rdata = rxi_resp_data >> prq_dout;
    assign a4l_rresp = `PRGA_AXI4_XRESP_OKAY;
    assign rxi_resp_rdy = prq_arb_ar_awn ? (!prq_empty && a4l_rready) :
                                           (!prq_empty && a4l_bready);
    assign prq_rd = prq_arb_ar_awn ? (rxi_resp_vld && a4l_rready) :
                                     (rxi_resp_vld && a4l_bready);

endmodule
