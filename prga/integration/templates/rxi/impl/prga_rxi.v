// Automatically generated by PRGA's RTL generator

/*
* RXI interface.
*/

`include "prga_rxi.vh"
`default_nettype none

module prga_rxi #(
    parameter   NUM_YAMI                = 1
    , parameter DEFAULT_TIMEOUT         = `PRGA_RXI_DATA_WIDTH'd1000
    , parameter HSR_FIFO_DEPTH_LOG2     = 3
    , parameter ASYNC_FIFO_DEPTH_LOG2   = 6
) (
    // -- Interface Ctrl -----------------------------------------------------
    input wire                                          clk
    , input wire                                        rst_n

    // -- Generate Application Clock -----------------------------------------
    , output wire                                       aclk
    , output wire                                       arst_n

    // -- System Slave Interface ---------------------------------------------
    , output wire                                       s_req_rdy
    , input wire                                        s_req_vld
    , input wire [`PRGA_RXI_ADDR_WIDTH-1:0]             s_req_addr
    , input wire [`PRGA_RXI_DATA_BYTES-1:0]             s_req_strb
    , input wire [`PRGA_RXI_DATA_WIDTH-1:0]             s_req_data

    , input wire                                        s_resp_rdy
    , output wire                                       s_resp_vld
    , output wire [`PRGA_RXI_DATA_WIDTH-1:0]            s_resp_data

    // -- Programming Master Interface ---------------------------------------
    // status
    , output reg                                        prog_rst_n
    , input wire                                        prog_done

    , input wire                                        prog_req_rdy
    , output wire                                       prog_req_vld
    , output wire [`PRGA_RXI_PROG_REG_ID_WIDTH-1:0]     prog_req_addr
    , output wire [`PRGA_RXI_DATA_BYTES-1:0]            prog_req_strb
    , output wire [`PRGA_RXI_DATA_WIDTH-1:0]            prog_req_data

    , output wire                                       prog_resp_rdy
    , input wire                                        prog_resp_vld
    , input wire                                        prog_resp_err
    , input wire [`PRGA_RXI_DATA_WIDTH-1:0]             prog_resp_data

    // -- Application Interface ----------------------------------------------
    , input wire [NUM_YAMI-1:0]                         yami_err_i
    , output reg                                        yami_deactivate_o
    , output reg [NUM_YAMI-1:0]                         yami_activate_o

    // -- Application Control ------------------------------------------------
    , output reg                                        app_rst_n

    // -- Applictaion Master Interface ---------------------------------------
    , input wire                                        m_req_rdy
    , output wire                                       m_req_vld
    , output wire [`PRGA_RXI_REGID_WIDTH-1:0]           m_req_addr  // register ID instead of address
    , output wire [`PRGA_RXI_DATA_BYTES-1:0]            m_req_strb
    , output wire [`PRGA_RXI_DATA_WIDTH-1:0]            m_req_data

    , output wire                                       m_resp_rdy
    , input wire                                        m_resp_vld
    , input wire                                        m_resp_sync
    , input wire [`PRGA_RXI_HSRID_WIDTH-1:0]            m_resp_syncaddr
    , input wire [`PRGA_RXI_DATA_WIDTH-1:0]             m_resp_data
    , input wire                                        m_resp_parity
    );

    // -- buffer system request --
    wire s_req_rdy_p, s_req_vld_f;
    wire [`PRGA_RXI_ADDR_WIDTH-1:0] s_req_addr_f;
    wire [`PRGA_RXI_DATA_BYTES-1:0] s_req_strb_f;
    wire [`PRGA_RXI_DATA_WIDTH-1:0] s_req_data_f;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (
            `PRGA_RXI_ADDR_WIDTH
            + `PRGA_RXI_DATA_BYTES
            + `PRGA_RXI_DATA_WIDTH
        )
    ) i_sreq_buf (
        .clk            (clk)
        ,.rst           (~rst_n)
        ,.rdy_o         (s_req_rdy)
        ,.val_i         (s_req_vld)
        ,.data_i        ({
            s_req_addr
            , s_req_strb
            , s_req_data
        })
        ,.rdy_i         (s_req_rdy_p)
        ,.val_o         (s_req_vld_f)
        ,.data_o        ({
            s_req_addr_f
            , s_req_strb_f
            , s_req_data_f
        })
        );

    // -- buffer system response --
    wire s_resp_rdy_f, s_resp_vld_p;
    wire [`PRGA_RXI_DATA_WIDTH-1:0] s_resp_data_p;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_RXI_DATA_WIDTH)
    ) i_sresp_buf (
        .clk            (clk)
        ,.rst           (~rst_n)
        ,.rdy_o         (s_resp_rdy_f)
        ,.val_i         (s_resp_vld_p)
        ,.data_i        (s_resp_data_p)
        ,.rdy_i         (s_resp_rdy)
        ,.val_o         (s_resp_vld)
        ,.data_o        (s_resp_data)
        );

    // -- buffer prog_rst_n for one cycle --
    wire                            prog_rst_np;
    reg                             prog_done_f;

    always @(posedge clk) begin
        if (~rst_n) begin
            prog_rst_n <= 1'b0;
            prog_done_f <= 1'b0;
        end else begin
            prog_rst_n <= prog_rst_np;
            prog_done_f <= prog_done;
        end
    end

    // -- buffer programming request --
    wire prog_req_rdy_f, prog_req_vld_p;
    wire [`PRGA_RXI_PROG_REG_ID_WIDTH-1:0]  prog_req_addr_p;
    wire [`PRGA_RXI_DATA_BYTES-1:0]         prog_req_strb_p;
    wire [`PRGA_RXI_DATA_WIDTH-1:0]         prog_req_data_p;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (
            `PRGA_RXI_PROG_REG_ID_WIDTH
            + `PRGA_RXI_DATA_BYTES
            + `PRGA_RXI_DATA_WIDTH
        )
    ) i_prog_req_buf (
        .clk            (clk)
        ,.rst           (~rst_n)
        ,.rdy_o         (prog_req_rdy_f)
        ,.val_i         (prog_req_vld_p)
        ,.data_i        ({
            prog_req_addr_p
            , prog_req_strb_p
            , prog_req_data_p
        })
        ,.rdy_i         (prog_req_rdy)
        ,.val_o         (prog_req_vld)
        ,.data_o        ({
            prog_req_addr
            , prog_req_strb
            , prog_req_data
        })
        );

    // -- buffer programming response --
    wire prog_resp_rdy_p, prog_resp_vld_f, prog_resp_err_f;
    wire [`PRGA_RXI_DATA_WIDTH-1:0]         prog_resp_data_f;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_RXI_DATA_WIDTH + 1)
    ) i_prog_resp_buf (
        .clk            (clk)
        ,.rst           (~rst_n)
        ,.rdy_o         (prog_resp_rdy)
        ,.val_i         (prog_resp_vld)
        ,.data_i        ({prog_resp_err, prog_resp_data})
        ,.rdy_i         (prog_resp_rdy_p)
        ,.val_o         (prog_resp_vld_f)
        ,.data_o        ({prog_resp_err_f, prog_resp_data_f})
        );

    // -- buffer application control signals --
    reg [NUM_YAMI-1:0]  yami_err_if;
    wire                yami_deactivate_op, app_rst_np;
    wire [NUM_YAMI-1:0] yami_activate_op;

    always @(posedge aclk) begin
        if (~arst_n) begin
            yami_err_if <= { NUM_YAMI {1'b0} };
            yami_deactivate_o <= 1'b0;
            yami_activate_o <= { NUM_YAMI {1'b0} };
            app_rst_n <= 1'b0;
        end else begin
            yami_err_if <= yami_err_i;
            yami_deactivate_o <= yami_deactivate_op;
            yami_activate_o <= yami_activate_op;
            app_rst_n <= app_rst_np;
        end
    end

    // -- buffer application request --
    wire m_req_rdy_f, m_req_vld_p;
    wire [`PRGA_RXI_REGID_WIDTH-1:0]    m_req_addr_p;
    wire [`PRGA_RXI_DATA_BYTES-1:0]     m_req_strb_p;
    wire [`PRGA_RXI_DATA_WIDTH-1:0]     m_req_data_p;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (
            `PRGA_RXI_REGID_WIDTH
            + `PRGA_RXI_DATA_BYTES
            + `PRGA_RXI_DATA_WIDTH
        )
    ) i_mreq_buf (
        .clk            (aclk)
        ,.rst           (~arst_n)
        ,.rdy_o         (m_req_rdy_f)
        ,.val_i         (m_req_vld_p)
        ,.data_i        ({
            m_req_addr_p
            , m_req_strb_p
            , m_req_data_p
        })
        ,.rdy_i         (m_req_rdy)
        ,.val_o         (m_req_vld)
        ,.data_o        ({
            m_req_addr
            , m_req_strb
            , m_req_data
        })
        );

    // -- buffer application response --
    wire m_resp_rdy_p, m_resp_vld_f, m_resp_sync_f, m_resp_parity_f;
    wire [`PRGA_RXI_HSRID_WIDTH-1:0]    m_resp_syncaddr_f;
    wire [`PRGA_RXI_DATA_WIDTH-1:0]     m_resp_data_f;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (
            `PRGA_RXI_HSRID_WIDTH
            + `PRGA_RXI_DATA_WIDTH
            + 2
        )
    ) i_mresp_buf (
        .clk            (aclk)
        ,.rst           (~arst_n)
        ,.rdy_o         (m_resp_rdy)
        ,.val_i         (m_resp_vld)
        ,.data_i        ({
            m_resp_sync
            , m_resp_syncaddr
            , m_resp_data
            , m_resp_parity
        })
        ,.rdy_i         (m_resp_rdy_p)
        ,.val_o         (m_resp_vld_f)
        ,.data_o        ({
            m_resp_sync_f
            , m_resp_syncaddr_f
            , m_resp_data_f
            , m_resp_parity_f
        })
        );

    // -- F2B FIFO --
    wire fifo_f2b_rd, fifo_f2b_rd_f, fifo_f2b_wr, fifo_f2b_wr_f;
    wire fifo_f2b_full, fifo_f2b_full_p, fifo_f2b_empty, fifo_f2b_empty_p;
    wire [`PRGA_RXI_F2B_ELEM_WIDTH-1:0] fifo_f2b_din, fifo_f2b_din_f;
    wire [`PRGA_RXI_F2B_ELEM_WIDTH-1:0] fifo_f2b_dout, fifo_f2b_dout_p;

    prga_async_fifo #(
        .DEPTH_LOG2     (ASYNC_FIFO_DEPTH_LOG2)
        ,.DATA_WIDTH    (`PRGA_RXI_F2B_ELEM_WIDTH)
        ,.LOOKAHEAD     (1)
    ) i_fifo_f2b (
        .wclk           (clk)
        ,.wrst          (~rst_n)
        ,.full          (fifo_f2b_full_p)
        ,.wr            (fifo_f2b_wr_f)
        ,.din           (fifo_f2b_din_f)
        ,.rclk          (aclk)
        ,.rrst          (~arst_n)
        ,.empty         (fifo_f2b_empty_p)
        ,.rd            (fifo_f2b_rd_f)
        ,.dout          (fifo_f2b_dout_p)
        );

    prga_fifo_wrbuf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_RXI_F2B_ELEM_WIDTH)
    ) i_fifo_f2b_wrbuf (
        .clk            (clk)
        ,.rst_n         (rst_n)
        ,.full_o        (fifo_f2b_full)
        ,.wr_i          (fifo_f2b_wr)
        ,.data_i        (fifo_f2b_din)
        ,.full_i        (fifo_f2b_full_p)
        ,.wr_o          (fifo_f2b_wr_f)
        ,.data_o        (fifo_f2b_din_f)
        );

    prga_fifo_rdbuf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_RXI_F2B_ELEM_WIDTH)
    ) i_fifo_f2b_rdbuf (
        .clk            (aclk)
        ,.rst_n         (arst_n)
        ,.rd_o          (fifo_f2b_rd_f)
        ,.empty_i       (fifo_f2b_empty_p)
        ,.data_i        (fifo_f2b_dout_p)
        ,.rd_i          (fifo_f2b_rd)
        ,.empty_o       (fifo_f2b_empty)
        ,.data_o        (fifo_f2b_dout)
        );

    // -- B2F FIFO --
    wire fifo_b2f_rd, fifo_b2f_rd_f, fifo_b2f_wr, fifo_b2f_wr_f;
    wire fifo_b2f_full, fifo_b2f_full_p, fifo_b2f_empty, fifo_b2f_empty_p;
    wire [`PRGA_RXI_B2F_ELEM_WIDTH-1:0] fifo_b2f_din, fifo_b2f_din_f;
    wire [`PRGA_RXI_B2F_ELEM_WIDTH-1:0] fifo_b2f_dout, fifo_b2f_dout_p;

    prga_async_fifo #(
        .DEPTH_LOG2     (ASYNC_FIFO_DEPTH_LOG2)
        ,.DATA_WIDTH    (`PRGA_RXI_B2F_ELEM_WIDTH)
        ,.LOOKAHEAD     (1)
    ) i_fifo_b2f (
        .wclk           (aclk)
        ,.wrst          (~arst_n)
        ,.full          (fifo_b2f_full_p)
        ,.wr            (fifo_b2f_wr_f)
        ,.din           (fifo_b2f_din_f)
        ,.rclk          (clk)
        ,.rrst          (~rst_n)
        ,.empty         (fifo_b2f_empty_p)
        ,.rd            (fifo_b2f_rd_f)
        ,.dout          (fifo_b2f_dout_p)
        );

    prga_fifo_wrbuf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_RXI_B2F_ELEM_WIDTH)
    ) i_fifo_b2f_wrbuf (
        .clk            (aclk)
        ,.rst_n         (arst_n)
        ,.full_o        (fifo_b2f_full)
        ,.wr_i          (fifo_b2f_wr)
        ,.data_i        (fifo_b2f_din)
        ,.full_i        (fifo_b2f_full_p)
        ,.wr_o          (fifo_b2f_wr_f)
        ,.data_o        (fifo_b2f_din_f)
        );

    prga_fifo_rdbuf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_RXI_B2F_ELEM_WIDTH)
    ) i_fifo_b2f_rdbuf (
        .clk            (clk)
        ,.rst_n         (rst_n)
        ,.rd_o          (fifo_b2f_rd_f)
        ,.empty_i       (fifo_b2f_empty_p)
        ,.data_i        (fifo_b2f_dout_p)
        ,.rd_i          (fifo_b2f_rd)
        ,.empty_o       (fifo_b2f_empty)
        ,.data_o        (fifo_b2f_dout)
        );

    // -- RXI frontend --
    prga_rxi_fe #(
        .HSR_FIFO_DEPTH_LOG2    (HSR_FIFO_DEPTH_LOG2)
    ) i_fe (
        .clk                (clk)
        ,.rst_n             (rst_n)
        ,.aclk              (aclk)
        ,.arst_n            (arst_n)
        ,.s_req_rdy         (s_req_rdy_p)
        ,.s_req_vld         (s_req_vld_f)
        ,.s_req_addr        (s_req_addr_f)
        ,.s_req_strb        (s_req_strb_f)
        ,.s_req_data        (s_req_data_f)
        ,.s_resp_rdy        (s_resp_rdy_f)
        ,.s_resp_vld        (s_resp_vld_p)
        ,.s_resp_data       (s_resp_data_p)
        ,.prog_rst_n        (prog_rst_np)
        ,.prog_done         (prog_done_f)
        ,.prog_req_rdy      (prog_req_rdy_f)
        ,.prog_req_vld      (prog_req_vld_p)
        ,.prog_req_addr     (prog_req_addr_p)
        ,.prog_req_strb     (prog_req_strb_p)
        ,.prog_req_data     (prog_req_data_p)
        ,.prog_resp_rdy     (prog_resp_rdy_p)
        ,.prog_resp_vld     (prog_resp_vld_f)
        ,.prog_resp_err     (prog_resp_err_f)
        ,.prog_resp_data    (prog_resp_data_f)
        ,.f2b_full          (fifo_f2b_full)
        ,.f2b_wr            (fifo_f2b_wr)
        ,.f2b_data          (fifo_f2b_din)
        ,.b2f_rd            (fifo_b2f_rd)
        ,.b2f_empty         (fifo_b2f_empty)
        ,.b2f_data          (fifo_b2f_dout)
        );

    // -- RXI backend --
    prga_rxi_be #(
        .NUM_YAMI           (NUM_YAMI)
        ,.DEFAULT_TIMEOUT   (DEFAULT_TIMEOUT)
    ) i_be (
        .clk                (aclk)
        ,.rst_n             (arst_n)
        ,.yami_err_i        (yami_err_if)
        ,.yami_deactivate_o (yami_deactivate_op)
        ,.yami_activate_o   (yami_activate_op)
        ,.f2b_rd            (fifo_f2b_rd)
        ,.f2b_empty         (fifo_f2b_empty)
        ,.f2b_elem          (fifo_f2b_dout)
        ,.b2f_full          (fifo_b2f_full)
        ,.b2f_wr            (fifo_b2f_wr)
        ,.b2f_elem          (fifo_b2f_din)
        ,.app_rst_n         (app_rst_np)
        ,.m_req_rdy         (m_req_rdy_f)
        ,.m_req_vld         (m_req_vld_p)
        ,.m_req_addr        (m_req_addr_p)
        ,.m_req_strb        (m_req_strb_p)
        ,.m_req_data        (m_req_data_p)
        ,.m_resp_rdy        (m_resp_rdy_p)
        ,.m_resp_vld        (m_resp_vld_f)
        ,.m_resp_sync       (m_resp_sync_f)
        ,.m_resp_syncaddr   (m_resp_syncaddr_f)
        ,.m_resp_data       (m_resp_data_f)
        ,.m_resp_parity     (m_resp_parity_f)
        );

endmodule
