// Automatically generated by PRGA's RTL generator

/*
* YAMI memory interface.
*/

`include "prga_yami.vh"
`default_nettype none

module prga_yami #(
    parameter   DEFAULT_FEATURES    = `PRGA_YAMI_CREG_FEATURE_LOAD | `PRGA_YAMI_CREG_FEATURE_STORE
    , parameter DEFAULT_TIMEOUT     = 32'd1000
    , parameter FIFO_DEPTH_LOG2     = 6
) (
    // == System Clock Domain ================================================
    // -- Interface Ctrl -----------------------------------------------------
    input wire                                          clk
    , input wire                                        rst_n

    // -- Ctrl Registers -----------------------------------------------------
    , output wire                                       creg_req_rdy
    , input wire                                        creg_req_vld
    , input wire [`PRGA_YAMI_CREG_DATA_BYTES-1:0]       creg_req_strb
    , input wire [`PRGA_YAMI_CREG_ADDR_WIDTH-1:0]       creg_req_addr
    , input wire [`PRGA_YAMI_CREG_DATA_WIDTH-1:0]       creg_req_data

    , input wire                                        creg_resp_rdy
    , output wire                                       creg_resp_vld
    , output wire [`PRGA_YAMI_CREG_DATA_WIDTH-1:0]      creg_resp_data

    // -- FMC (fabric-memory channel) ----------------------------------------
    , input wire                                        sfmc_rdy
    , output wire                                       sfmc_vld
    , output wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]        sfmc_type
    , output wire [`PRGA_YAMI_SIZE_WIDTH-1:0]           sfmc_size
    , output wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]       sfmc_addr
    , output wire [`PRGA_YAMI_FMC_DATA_WIDTH-1:0]       sfmc_data

    // -- MFC (memory-fabric channel) ----------------------------------------
    , output wire                                       smfc_rdy
    , input wire                                        smfc_vld
    , input wire [`PRGA_YAMI_RESPTYPE_WIDTH-1:0]        smfc_type
    , input wire [`PRGA_YAMI_MFC_ADDR_WIDTH-1:0]        smfc_addr
    , input wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]        smfc_data

    // == Application Clock Domain ===========================================
    // -- Interface Ctrl -----------------------------------------------------
    , input wire                                        aclk
    , input wire                                        arst_n
    , output reg                                        err_o       // error signal out
    , input wire                                        deactivate_i    // deactivation from RXI
    , input wire                                        activate_i      // activation from RXI

    // -- FMC (fabric-memory channel) ----------------------------------------
    , output wire                                       afmc_rdy
    , input wire                                        afmc_vld
    , input wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]         afmc_type
    , input wire [`PRGA_YAMI_SIZE_WIDTH-1:0]            afmc_size
    , input wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]        afmc_addr
    , input wire [`PRGA_YAMI_FMC_DATA_WIDTH-1:0]        afmc_data
    , input wire                                        afmc_parity

    // -- MFC (memory-fabric channel) ----------------------------------------
    , input wire                                        amfc_rdy
    , output wire                                       amfc_vld
    , output wire [`PRGA_YAMI_RESPTYPE_WIDTH-1:0]       amfc_type
    , output wire [`PRGA_YAMI_MFC_ADDR_WIDTH-1:0]       amfc_addr
    , output wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]       amfc_data
    );

    // -- buffer CReg Request -- 
    wire                                        creg_req_rdy_p;
    wire                                        creg_req_vld_f;
    wire                                        creg_req_we_f;
    wire [`PRGA_YAMI_CREG_ADDR_WIDTH-1:0]       creg_req_addr_f;
    wire [`PRGA_YAMI_CREG_DATA_WIDTH-1:0]       creg_req_data_f;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (1
            + `PRGA_YAMI_CREG_ADDR_WIDTH
            + `PRGA_YAMI_CREG_DATA_WIDTH
        )
    ) i_buf_creg_req (
        .clk                (clk)
        ,.rst               (~rst_n)
        ,.rdy_o             (creg_req_rdy)
        ,.val_i             (creg_req_vld)
        ,.data_i            ({
            &creg_req_strb
            , creg_req_addr
            , creg_req_data
        })
        ,.rdy_i             (creg_req_rdy_p)
        ,.val_o             (creg_req_vld_f)
        ,.data_o            ({
            creg_req_we_f
            , creg_req_addr_f
            , creg_req_data_f
        })
        );

    // -- buffer CReg Response --
    wire                                        creg_resp_rdy_f;
    wire                                        creg_resp_vld_p;
    wire [`PRGA_YAMI_CREG_DATA_WIDTH-1:0]       creg_resp_data_p;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_YAMI_CREG_DATA_WIDTH)
    ) i_buf_creg_resp (
        .clk                (clk)
        ,.rst               (~rst_n)
        ,.rdy_o             (creg_resp_rdy_f)
        ,.val_i             (creg_resp_vld_p)
        ,.data_i            (creg_resp_data_p)
        ,.rdy_i             (creg_resp_rdy)
        ,.val_o             (creg_resp_vld)
        ,.data_o            (creg_resp_data)
        );

    // -- buffer system FMC request --
    wire                                        sfmc_rdy_f;
    wire                                        sfmc_vld_p;
    wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]         sfmc_type_p;
    wire [`PRGA_YAMI_SIZE_WIDTH-1:0]            sfmc_size_p;
    wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]        sfmc_addr_p;
    wire [`PRGA_YAMI_FMC_DATA_WIDTH-1:0]        sfmc_data_p;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (
            `PRGA_YAMI_REQTYPE_WIDTH
            + `PRGA_YAMI_SIZE_WIDTH
            + `PRGA_YAMI_FMC_ADDR_WIDTH
            + `PRGA_YAMI_FMC_DATA_WIDTH
        )
    ) i_buf_sfmc (
        .clk                (clk)
        ,.rst               (~rst_n)
        ,.rdy_o             (sfmc_rdy_f)
        ,.val_i             (sfmc_vld_p)
        ,.data_i            ({
            sfmc_type_p
            , sfmc_size_p
            , sfmc_addr_p
            , sfmc_data_p
        })
        ,.rdy_i             (sfmc_rdy)
        ,.val_o             (sfmc_vld)
        ,.data_o            ({
            sfmc_type
            , sfmc_size
            , sfmc_addr
            , sfmc_data
        })
        );

    // -- buffer system MFC response --
    wire                                        smfc_rdy_p;
    wire                                        smfc_vld_f;
    wire [`PRGA_YAMI_RESPTYPE_WIDTH-1:0]        smfc_type_f;
    wire [`PRGA_YAMI_MFC_ADDR_WIDTH-1:0]        smfc_addr_f;
    wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]        smfc_data_f;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (
            `PRGA_YAMI_RESPTYPE_WIDTH
            + `PRGA_YAMI_MFC_ADDR_WIDTH
            + `PRGA_YAMI_MFC_DATA_WIDTH
        )
    ) i_buf_smfc (
        .clk                (clk)
        ,.rst               (~rst_n)
        ,.rdy_o             (smfc_rdy)
        ,.val_i             (smfc_vld)
        ,.data_i            ({
            smfc_type
            , smfc_addr
            , smfc_data
        })
        ,.rdy_i             (smfc_rdy_p)
        ,.val_o             (smfc_vld_f)
        ,.data_o            ({
            smfc_type_f
            , smfc_addr_f
            , smfc_data_f
        })
        );

    // -- buffer application FMC request --
    wire                                        afmc_rdy_p;
    wire                                        afmc_vld_f;
    wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]         afmc_type_f;
    wire [`PRGA_YAMI_SIZE_WIDTH-1:0]            afmc_size_f;
    wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]        afmc_addr_f;
    wire [`PRGA_YAMI_FMC_DATA_WIDTH-1:0]        afmc_data_f;
    wire                                        afmc_parity_f;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (
            `PRGA_YAMI_REQTYPE_WIDTH
            + `PRGA_YAMI_SIZE_WIDTH
            + `PRGA_YAMI_FMC_ADDR_WIDTH
            + `PRGA_YAMI_FMC_DATA_WIDTH
            + 1
        )
    ) i_buf_afmc (
        .clk                (aclk)
        ,.rst               (~arst_n)
        ,.rdy_o             (afmc_rdy)
        ,.val_i             (afmc_vld)
        ,.data_i            ({
            afmc_type
            , afmc_size
            , afmc_addr
            , afmc_data
            , afmc_parity
        })
        ,.rdy_i             (afmc_rdy_p)
        ,.val_o             (afmc_vld_f)
        ,.data_o            ({
            afmc_type_f
            , afmc_size_f
            , afmc_addr_f
            , afmc_data_f
            , afmc_parity_f
        })
        );

    // -- buffer application MFC response --
    wire                                        amfc_rdy_f;
    wire                                        amfc_vld_p;
    wire [`PRGA_YAMI_RESPTYPE_WIDTH-1:0]        amfc_type_p;
    wire [`PRGA_YAMI_MFC_ADDR_WIDTH-1:0]        amfc_addr_p;
    wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]        amfc_data_p;

    prga_valrdy_buf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (
            `PRGA_YAMI_RESPTYPE_WIDTH
            + `PRGA_YAMI_MFC_ADDR_WIDTH
            + `PRGA_YAMI_MFC_DATA_WIDTH
        )
    ) i_buf_amfc (
        .clk                (aclk)
        ,.rst               (~arst_n)
        ,.rdy_o             (amfc_rdy_f)
        ,.val_i             (amfc_vld_p)
        ,.data_i            ({
            amfc_type_p
            , amfc_addr_p
            , amfc_data_p
        })
        ,.rdy_i             (amfc_rdy)
        ,.val_o             (amfc_vld)
        ,.data_o            ({
            amfc_type
            , amfc_addr
            , amfc_data
        })
        );

    // -- FMC FIFO --
    wire fifo_fmc_rd, fifo_fmc_rd_f, fifo_fmc_wr, fifo_fmc_wr_f;
    wire fifo_fmc_full, fifo_fmc_full_p, fifo_fmc_empty, fifo_fmc_empty_p;
    wire [`PRGA_YAMI_FMC_FIFO_ELEM_WIDTH-1:0]   fifo_fmc_din, fifo_fmc_din_f;
    wire [`PRGA_YAMI_FMC_FIFO_ELEM_WIDTH-1:0]   fifo_fmc_dout, fifo_fmc_dout_p;

    prga_async_fifo #(
        .DEPTH_LOG2     (FIFO_DEPTH_LOG2)
        ,.DATA_WIDTH    (`PRGA_YAMI_FMC_FIFO_ELEM_WIDTH)
        ,.LOOKAHEAD     (1)
    ) i_fifo_fmc (
        .rst_n          (arst_n)
        ,.wclk          (aclk)
        ,.rclk          (clk)

        ,.full          (fifo_fmc_full_p)
        ,.wr            (fifo_fmc_wr_f)
        ,.din           (fifo_fmc_din_f)

        ,.empty         (fifo_fmc_empty_p)
        ,.rd            (fifo_fmc_rd_f)
        ,.dout          (fifo_fmc_dout_p)
        );

    prga_fifo_wrbuf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_YAMI_FMC_FIFO_ELEM_WIDTH)
    ) i_fifo_fmc_wrbuf (
        .clk            (aclk)
        ,.rst_n         (arst_n)
        ,.full_o        (fifo_fmc_full)
        ,.wr_i          (fifo_fmc_wr)
        ,.data_i        (fifo_fmc_din)
        ,.full_i        (fifo_fmc_full_p)
        ,.wr_o          (fifo_fmc_wr_f)
        ,.data_o        (fifo_fmc_din_f)
        );

    prga_fifo_rdbuf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_YAMI_FMC_FIFO_ELEM_WIDTH)
    ) i_fifo_fmc_rdbuf (
        .clk            (clk)
        ,.rst_n         (rst_n)
        ,.rd_o          (fifo_fmc_rd_f)
        ,.empty_i       (fifo_fmc_empty_p)
        ,.data_i        (fifo_fmc_dout_p)
        ,.rd_i          (fifo_fmc_rd)
        ,.empty_o       (fifo_fmc_empty)
        ,.data_o        (fifo_fmc_dout)
        );

    // -- MFC FIFO --
    wire fifo_mfc_rd, fifo_mfc_rd_f, fifo_mfc_wr, fifo_mfc_wr_f;
    wire fifo_mfc_full, fifo_mfc_full_p, fifo_mfc_empty, fifo_mfc_empty_p;
    wire [`PRGA_YAMI_MFC_FIFO_ELEM_WIDTH-1:0]   fifo_mfc_din, fifo_mfc_din_f;
    wire [`PRGA_YAMI_MFC_FIFO_ELEM_WIDTH-1:0]   fifo_mfc_dout, fifo_mfc_dout_p;

    prga_async_fifo #(
        .DEPTH_LOG2     (FIFO_DEPTH_LOG2)
        ,.DATA_WIDTH    (`PRGA_YAMI_MFC_FIFO_ELEM_WIDTH)
        ,.LOOKAHEAD     (1)
    ) i_fifo_mfc (
        .rst_n          (rst_n)
        ,.wclk          (clk)
        ,.rclk          (aclk)

        ,.full          (fifo_mfc_full_p)
        ,.wr            (fifo_mfc_wr_f)
        ,.din           (fifo_mfc_din_f)

        ,.empty         (fifo_mfc_empty_p)
        ,.rd            (fifo_mfc_rd_f)
        ,.dout          (fifo_mfc_dout_p)
        );

    prga_fifo_wrbuf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_YAMI_MFC_FIFO_ELEM_WIDTH)
    ) i_fifo_mfc_wrbuf (
        .clk            (clk)
        ,.rst_n         (rst_n)
        ,.full_o        (fifo_mfc_full)
        ,.wr_i          (fifo_mfc_wr)
        ,.data_i        (fifo_mfc_din)
        ,.full_i        (fifo_mfc_full_p)
        ,.wr_o          (fifo_mfc_wr_f)
        ,.data_o        (fifo_mfc_din_f)
        );

    prga_fifo_rdbuf #(
        .REGISTERED     (1)
        ,.DECOUPLED     (1)
        ,.DATA_WIDTH    (`PRGA_YAMI_MFC_FIFO_ELEM_WIDTH)
    ) i_fifo_mfc_rdbuf (
        .clk            (aclk)
        ,.rst_n         (arst_n)
        ,.rd_o          (fifo_mfc_rd_f)
        ,.empty_i       (fifo_mfc_empty_p)
        ,.data_i        (fifo_mfc_dout_p)
        ,.rd_i          (fifo_mfc_rd)
        ,.empty_o       (fifo_mfc_empty)
        ,.data_o        (fifo_mfc_dout)
        );

    // -- YAMI frontend --
    prga_yami_fe i_fe (
        .clk                (clk)
        ,.rst_n             (rst_n)
        ,.creg_req_rdy      (creg_req_rdy_p)
        ,.creg_req_vld      (creg_req_vld_f)
        ,.creg_req_we       (creg_req_we_f)
        ,.creg_req_addr     (creg_req_addr_f)
        ,.creg_req_data     (creg_req_data_f)
        ,.creg_resp_rdy     (creg_resp_rdy_f)
        ,.creg_resp_vld     (creg_resp_vld_p)
        ,.creg_resp_data    (creg_resp_data_p)
        ,.fifo_mfc_full     (fifo_mfc_full)
        ,.fifo_mfc_wr       (fifo_mfc_wr)
        ,.fifo_mfc_data     (fifo_mfc_din)
        ,.fifo_fmc_empty    (fifo_fmc_empty)
        ,.fifo_fmc_rd       (fifo_fmc_rd)
        ,.fifo_fmc_data     (fifo_fmc_dout)
        ,.fmc_rdy           (sfmc_rdy_f)
        ,.fmc_vld           (sfmc_vld_p)
        ,.fmc_type          (sfmc_type_p)
        ,.fmc_size          (sfmc_size_p)
        ,.fmc_addr          (sfmc_addr_p)
        ,.fmc_data          (sfmc_data_p)
        ,.mfc_rdy           (smfc_rdy_p)
        ,.mfc_vld           (smfc_vld_f)
        ,.mfc_type          (smfc_type_f)
        ,.mfc_addr          (smfc_addr_f)
        ,.mfc_data          (smfc_data_f)
        );

    // -- buffer application control signals --
    wire err_op;
    reg activate_if, deactivate_if;

    always @(posedge aclk) begin
        if (~arst_n) begin
            activate_if <= 1'b0;
            deactivate_if <= 1'b0;
            err_o <= 1'b0;
        end else begin
            activate_if <= activate_i;
            deactivate_if <= deactivate_i;
            err_o <= err_op;
        end
    end

    // -- YAMI backend --
    prga_yami_be #(
        .DEFAULT_FEATURES   (DEFAULT_FEATURES)
        ,.DEFAULT_TIMEOUT   (DEFAULT_TIMEOUT)
    ) i_be (
        .clk                (aclk)
        ,.rst_n             (arst_n)
        ,.err_o             (err_op)
        ,.deactivate_i      (deactivate_if)
        ,.activate_i        (activate_if)
        ,.fifo_fmc_full     (fifo_fmc_full)
        ,.fifo_fmc_wr       (fifo_fmc_wr)
        ,.fifo_fmc_data     (fifo_fmc_din)
        ,.fifo_mfc_rd       (fifo_mfc_rd)
        ,.fifo_mfc_empty    (fifo_mfc_empty)
        ,.fifo_mfc_data     (fifo_mfc_dout)
        ,.fmc_rdy           (afmc_rdy_p)
        ,.fmc_vld           (afmc_vld_f)
        ,.fmc_type          (afmc_type_f)
        ,.fmc_size          (afmc_size_f)
        ,.fmc_addr          (afmc_addr_f)
        ,.fmc_data          (afmc_data_f)
        ,.fmc_parity        (afmc_parity_f)
        ,.mfc_rdy           (amfc_rdy_f)
        ,.mfc_vld           (amfc_vld_p)
        ,.mfc_type          (amfc_type_p)
        ,.mfc_addr          (amfc_addr_p)
        ,.mfc_data          (amfc_data_p)
        );

endmodule
