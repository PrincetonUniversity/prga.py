// Automatically generated by PRGA's RTL generator

/*
* Main pipeline, stage II for prga_yami_pitoncache.
*/

`include "prga_yami.vh"
`include "prga_yami_pitoncache.vh"
`default_nettype none

module prga_yami_pitoncache_pipeline_s2 (
    // -- System Ctrl --------------------------------------------------------
    input wire                                          clk
    , input wire                                        rst_n

    // -- From Stage I -------------------------------------------------------
    , output wire                                               stall_s2
    , input wire [`PRGA_YAMI_CACHE_S3OP_WIDTH-1:0]              op_s2_next
    , input wire [`PRGA_YAMI_CACHE_NUM_WAYS_LOG2-1:0]           inv_ilq_way_s2_next
    , input wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]                 reqtype_s2_next
    , input wire [`PRGA_YAMI_SIZE_WIDTH-1:0]                    size_s2_next
    , input wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]                addr_s2_next
    , input wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]                data_s2_next
    , input wire [`PRGA_YAMI_CACHE_ROB_NUM_ENTRIES_LOG2-1:0]    rob_entry_s2_next

    // -- To Stage III -------------------------------------------------------
    , input wire                                                stall_s3
    , input wire                                                enqueue_rpb_s3
    , output reg [`PRGA_YAMI_CACHE_S3OP_WIDTH-1:0]              op_s3_next
    , output reg [`PRGA_YAMI_CACHE_NUM_WAYS_LOG2-1:0]           inv_ilq_way_s2
    , output reg [`PRGA_YAMI_REQTYPE_WIDTH-1:0]                 reqtype_s2
    , output reg [`PRGA_YAMI_SIZE_WIDTH-1:0]                    size_s2
    , output reg [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]                addr_s2
    , output reg [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]                data_s2
    , output reg [`PRGA_YAMI_CACHE_ROB_NUM_ENTRIES_LOG2-1:0]    rob_entry_s2

    // -- To RPB -------------------------------------------------------------
    , output reg                                                rpb_vld_s2

    // -- To Data Array ------------------------------------------------------
    , output reg                                                data_array_rd_s2
    , output wire [`PRGA_YAMI_CACHE_INDEX_WIDTH-1:0]            index_s2
    , output wire [`PRGA_YAMI_CACHE_TAG_WIDTH-1:0]              tag_s2
    );

    reg [`PRGA_YAMI_CACHE_S3OP_WIDTH-1:0]           op_s2;

    always @(posedge clk) begin
        if (~rst_n) begin
            op_s2          <= `PRGA_YAMI_CACHE_S3OP_NONE;
            inv_ilq_way_s2 <= { `PRGA_YAMI_CACHE_NUM_WAYS_LOG2 {1'b0} };
            reqtype_s2     <= `PRGA_YAMI_REQTYPE_NONE;
            size_s2        <= `PRGA_YAMI_SIZE_FULL;
            addr_s2        <= { `PRGA_YAMI_FMC_ADDR_WIDTH {1'b0} };
            data_s2        <= { `PRGA_YAMI_MFC_DATA_WIDTH {1'b0} };
            rob_entry_s2   <= { `PRGA_YAMI_CACHE_ROB_NUM_ENTRIES_LOG2 {1'b0} };
        end else if (~stall_s2) begin
            op_s2          <= op_s2_next;
            inv_ilq_way_s2 <= inv_ilq_way_s2_next;
            reqtype_s2     <= reqtype_s2_next;
            size_s2        <= size_s2_next;
            addr_s2        <= addr_s2_next;
            data_s2        <= data_s2_next;
            rob_entry_s2   <= rob_entry_s2_next;
        end
    end

    always @* begin
        op_s3_next                  = op_s2;
        rpb_vld_s2                  = 1'b0;
        data_array_rd_s2            = 1'b0;

        case (op_s2)
            `PRGA_YAMI_CACHE_S3OP_APP_REQ: begin
                rpb_vld_s2          = 1'b1;

                if (enqueue_rpb_s3) begin
                    op_s3_next = `PRGA_YAMI_CACHE_S3OP_NONE;
                end else begin
                    data_array_rd_s2    = 1'b1;
                end
            end

            `PRGA_YAMI_CACHE_S3OP_LD_ACK: begin
                data_array_rd_s2    = 1'b1;
            end
        endcase
    end

    assign stall_s2 = stall_s3;
    assign index_s2 = addr_s2[`PRGA_YAMI_CACHE_INDEX_LOW +: `PRGA_YAMI_CACHE_INDEX_WIDTH];
    assign tag_s2 = addr_s2[`PRGA_YAMI_CACHE_TAG_LOW +: `PRGA_YAMI_CACHE_TAG_WIDTH];

endmodule
