// Automatically generated by PRGA's RTL generator

/*
* Main pipeline, stage II for prga_yami_pitoncache.
*/

`include "prga_yami.vh"
`include "prga_yami_pitoncache.vh"
`default_nettype none

module prga_yami_pitoncache_pipeline_s2 (
    // -- System Ctrl --------------------------------------------------------
    input wire                                          clk
    , input wire                                        rst_n

    // -- From Stage I -------------------------------------------------------
    , output reg                                        stall_s2
    , input wire [`PRGA_YAMI_CACHE_S2OP_WIDTH-1:0]      op_s2_next
    , input wire [`PRGA_YAMI_CACHE_NUM_WAYS_LOG2-1:0]   inv_way_s2_next
    , input wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]         reqtype_s2_next
    , input wire [`PRGA_YAMI_SIZE_WIDTH-1:0]            size_s2_next
    , input wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]        addr_s2_next
    , input wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]        data_s2_next
    , input wire [`PRGA_YAMI_CACHE_ROB_NUM_ENTRIES_LOG2-1:0]    rpb_rob_entry_s2_next

    // -- To Stage III -------------------------------------------------------
    , input wire                                        stall_s3
    , input wire                                        enqueue_rpb_s3
    , output reg [`PRGA_YAMI_CACHE_S3OP_WIDTH-1:0]      op_s3_next
    , output reg [`PRGA_YAMI_CACHE_NUM_WAYS_LOG2-1:0]   inv_ilq_way_s3_next
    , output wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]        reqtype_s3_next
    , output reg [`PRGA_YAMI_SIZE_WIDTH-1:0]            size_s3_next
    , output reg [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]        addr_s3_next
    , output wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]       data_s3_next
    , output reg [`PRGA_YAMI_CACHE_ROB_NUM_ENTRIES_LOG2-1:0]    rob_entry_s3_next

    // -- To RPB -------------------------------------------------------------
    , output reg                                        validate_rpb_s2
    // validate if rpb.addr[index] == index_s2

    , output reg                                        rpb_vld_s2
    , output wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]        rpb_reqtype_s2
    , output wire [`PRGA_YAMI_SIZE_WIDTH-1:0]           rpb_size_s2
    , output wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]       rpb_addr_s2
    , output wire [`PRGA_YAMI_FMC_DATA_WIDTH-1:0]       rpb_data_s2

    // -- To ROB -------------------------------------------------------------
    , input wire                                        rob_next_entry_vld_s2
    , input wire [`PRGA_YAMI_RESPTYPE_WIDTH-1:0]        rob_next_entry_s2

    , output reg                                        rob_alloc_s2
    , output reg [`PRGA_YAMI_RESPTYPE_WIDTH-1:0]        rob_alloc_resptype_s2

    // -- To ILQ -------------------------------------------------------------
    , output reg                                        ilq_rd_s2
    , input wire                                        ilq_nc_s2
    , input wire [`PRGA_YAMI_CACHE_INDEX_WIDTH-1:0]     ilq_index_s2
    , input wire [`PRGA_YAMI_CACHE_NUM_WAYS_LOG2-1:0]   ilq_way_s2
    , input wire [`PRGA_YAMI_CACHE_INDEX_LOW-1:0]       ilq_offset_s2
    , input wire [`PRGA_YAMI_SIZE_WIDTH-1:0]            ilq_size_s2
    , input wire [`PRGA_YAMI_CACHE_ROB_NUM_ENTRIES_LOG2-1:0]    ilq_rob_entry_s2

    // -- To ISQ -------------------------------------------------------------
    , output reg                                        isq_rd_s2
    , input wire                                        isq_nc_s2
    , input wire [`PRGA_YAMI_CACHE_ROB_NUM_ENTRIES_LOG2-1:0]    isq_rob_entry_s2

    // -- To IMQ -------------------------------------------------------------
    , output reg                                        imq_rd_s2
    , input wire [`PRGA_YAMI_CACHE_INDEX_LOW-1:0]       imq_offset_s2
    , input wire [`PRGA_YAMI_SIZE_WIDTH-1:0]            imq_size_s2
    , input wire [`PRGA_YAMI_CACHE_ROB_NUM_ENTRIES_LOG2-1:0]    imq_rob_entry_s2

    // -- To Arrays, etc. ----------------------------------------------------
    , input wire                                        lru_array_busy_s2
    , input wire                                        tag_array_busy_s2
    , input wire                                        state_array_busy_s2

    , output reg [`PRGA_YAMI_CACHE_INDEX_WIDTH-1:0]     index_s2
    , output reg                                        lru_array_rd_s2
    , output reg                                        tag_array_rd_s2
    , output reg                                        state_array_rd_s2
    , output reg                                        data_array_rd_s2
    );

    reg [`PRGA_YAMI_CACHE_S2OP_WIDTH-1:0]       op_s2;
    reg [`PRGA_YAMI_CACHE_NUM_WAYS_LOG2-1:0]    inv_way_s2;
    reg [`PRGA_YAMI_REQTYPE_WIDTH-1:0]          reqtype_s2;
    reg [`PRGA_YAMI_SIZE_WIDTH-1:0]             size_s2;
    reg [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]         addr_s2;
    reg [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]         data_s2;
    reg [`PRGA_YAMI_CACHE_ROB_NUM_ENTRIES_LOG2-1:0]     rpb_rob_entry_s2;

    always @(posedge clk) begin
        if (~rst_n) begin
            op_s2           <= `PRGA_YAMI_CACHE_S2OP_NONE;
            inv_way_s2      <= { `PRGA_YAMI_CACHE_NUM_WAYS_LOG2 {1'b0} };
            reqtype_s2      <= `PRGA_YAMI_REQTYPE_NONE;
            size_s2         <= `PRGA_YAMI_SIZE_FULL;
            addr_s2         <= { `PRGA_YAMI_FMC_ADDR_WIDTH {1'b0} };
            data_s2         <= { `PRGA_YAMI_MFC_DATA_WIDTH {1'b0} };
            rpb_rob_entry_s2    <= { `PRGA_YAMI_CACHE_ROB_NUM_ENTRIES_LOG2 {1'b0} };
        end else if (~stall_s2) begin
            op_s2           <= op_s2_next;
            inv_way_s2      <= inv_way_s2_next;
            reqtype_s2      <= reqtype_s2_next;
            size_s2         <= size_s2_next;
            addr_s2         <= addr_s2_next;
            data_s2         <= data_s2_next;
            rpb_rob_entry_s2    <= rpb_rob_entry_s2_next;
        end
    end

    always @* begin
        stall_s2            = stall_s3;

        op_s3_next          = `PRGA_YAMI_CACHE_S3OP_NONE;
        inv_ilq_way_s3_next = inv_way_s2;
        size_s3_next        = size_s2;
        addr_s3_next        = addr_s2;
        rob_entry_s3_next   = rob_next_entry_s2;

        validate_rpb_s2     = 1'b0;
        rpb_vld_s2          = 1'b0;

        rob_alloc_s2        = 1'b0;
        rob_alloc_resptype_s2 = `PRGA_YAMI_RESPTYPE_NONE;
        ilq_rd_s2           = 1'b0;
        isq_rd_s2           = 1'b0;
        imq_rd_s2           = 1'b0;

        index_s2            = addr_s2[`PRGA_YAMI_CACHE_INDEX_LOW +: `PRGA_YAMI_CACHE_INDEX_WIDTH];
        lru_array_rd_s2     = 1'b0;
        tag_array_rd_s2     = 1'b0;
        state_array_rd_s2   = 1'b0;
        data_array_rd_s2    = 1'b0;

        if (!stall_s3) begin
            case (op_s2)
                `PRGA_YAMI_CACHE_S2OP_APP_REQ: if (enqueue_rpb_s3) begin
                    rpb_vld_s2 = 1'b1;
                end else begin
                    rob_alloc_s2 = !(lru_array_busy_s2 || tag_array_busy_s2 || state_array_busy_s2);
                    lru_array_rd_s2 = rob_next_entry_vld_s2;
                    tag_array_rd_s2 = rob_next_entry_vld_s2;
                    state_array_rd_s2 = rob_next_entry_vld_s2;
                    data_array_rd_s2 = rob_next_entry_vld_s2;

                    if (!rob_next_entry_vld_s2
                        || lru_array_busy_s2
                        || tag_array_busy_s2
                        || state_array_busy_s2
                    ) begin
                        stall_s2 = 1'b1;
                    end else begin
                        op_s3_next = `PRGA_YAMI_CACHE_S3OP_APP_REQ;
                    end

                    case (reqtype_s2)
                        `PRGA_YAMI_REQTYPE_LOAD,
                        `PRGA_YAMI_REQTYPE_LOAD_NC:
                            rob_alloc_resptype_s2 = `PRGA_YAMI_RESPTYPE_LOAD_ACK;

                        `PRGA_YAMI_REQTYPE_STORE,
                        `PRGA_YAMI_REQTYPE_STORE_NC:
                            rob_alloc_resptype_s2 = `PRGA_YAMI_RESPTYPE_STORE_ACK;

                        `PRGA_YAMI_REQTYPE_AMO_LR,
                        `PRGA_YAMI_REQTYPE_AMO_SC,
                        `PRGA_YAMI_REQTYPE_AMO_SWAP,
                        `PRGA_YAMI_REQTYPE_AMO_ADD,
                        `PRGA_YAMI_REQTYPE_AMO_AND,
                        `PRGA_YAMI_REQTYPE_AMO_OR,
                        `PRGA_YAMI_REQTYPE_AMO_XOR,
                        `PRGA_YAMI_REQTYPE_AMO_MAX,
                        `PRGA_YAMI_REQTYPE_AMO_MAXU,
                        `PRGA_YAMI_REQTYPE_AMO_MIN,
                        `PRGA_YAMI_REQTYPE_AMO_MINU:
                            rob_alloc_resptype_s2 = `PRGA_YAMI_RESPTYPE_AMO_ACK;
                    endcase
                end

                `PRGA_YAMI_CACHE_S2OP_REPLAY_REQ: begin     // replayed request, ROB already allocated
                    if (lru_array_busy_s2
                        || tag_array_busy_s2
                        || state_array_busy_s2
                    ) begin
                        stall_s2 = 1'b1;
                    end else begin
                        op_s3_next = `PRGA_YAMI_CACHE_S3OP_APP_REQ;
                    end

                    rob_entry_s3_next = rpb_rob_entry_s2;
                    lru_array_rd_s2 = 1'b1;
                    tag_array_rd_s2 = 1'b1;
                    state_array_rd_s2 = 1'b1;
                    data_array_rd_s2 = 1'b1;
                end

                `PRGA_YAMI_CACHE_S2OP_INV_WAY: begin
                    if (state_array_busy_s2) begin
                        stall_s2 = 1'b1;
                    end else begin
                        op_s3_next = `PRGA_YAMI_CACHE_S3OP_INV_WAY;
                    end

                    inv_ilq_way_s3_next = inv_way_s2;
                    state_array_rd_s2 = 1'b1;
                end

                `PRGA_YAMI_CACHE_S2OP_INV_ALL: begin
                    if (state_array_busy_s2) begin
                        stall_s2 = 1'b1;
                    end else begin
                        op_s3_next = `PRGA_YAMI_CACHE_S3OP_INV_ALL;
                    end

                    state_array_rd_s2 = 1'b1;
                end

                `PRGA_YAMI_CACHE_S2OP_LD_ACK: begin
                    if (state_array_busy_s2) begin
                        stall_s2 = 1'b1;
                    end else begin
                        op_s3_next = ilq_nc_s2 ? `PRGA_YAMI_CACHE_S3OP_LD_NC_ACK :
                                                 `PRGA_YAMI_CACHE_S3OP_LD_ACK;
                        validate_rpb_s2 = 1'b1;
                        ilq_rd_s2 = 1'b1;
                    end

                    inv_ilq_way_s3_next = ilq_way_s2;
                    size_s3_next = ilq_size_s2;
                    addr_s3_next = { `PRGA_YAMI_FMC_ADDR_WIDTH {1'b0} };
                    addr_s3_next[0 +: `PRGA_YAMI_CACHE_INDEX_LOW] = ilq_offset_s2;
                    addr_s3_next[`PRGA_YAMI_CACHE_INDEX_LOW +: `PRGA_YAMI_CACHE_INDEX_WIDTH] = ilq_index_s2;
                    rob_entry_s3_next = ilq_rob_entry_s2;

                    index_s2 = ilq_index_s2;
                    state_array_rd_s2 = 1'b1;
                    data_array_rd_s2 = 1'b1;
                end

                `PRGA_YAMI_CACHE_S2OP_ST_ACK: begin
                    op_s3_next = isq_nc_s2 ? `PRGA_YAMI_CACHE_S3OP_ST_NC_ACK :
                                             `PRGA_YAMI_CACHE_S3OP_NONE;
                    rob_entry_s3_next = isq_rob_entry_s2;
                    isq_rd_s2 = 1'b1;
                end

                `PRGA_YAMI_CACHE_S2OP_AMO_ACK: begin
                    op_s3_next = `PRGA_YAMI_CACHE_S3OP_AMO_ACK;
                    size_s3_next = imq_size_s2;
                    addr_s3_next = { `PRGA_YAMI_FMC_ADDR_WIDTH {1'b0} };
                    addr_s3_next[0 +: `PRGA_YAMI_CACHE_INDEX_LOW] = imq_offset_s2;
                    rob_entry_s3_next = imq_rob_entry_s2;
                    imq_rd_s2 = 1'b1;
                end
            endcase
        end
    end

    assign reqtype_s3_next      = reqtype_s2;
    assign data_s3_next         = data_s2;
    assign rpb_reqtype_s2       = reqtype_s2;
    assign rpb_size_s2          = size_s2;
    assign rpb_addr_s2          = addr_s2;
    assign rpb_data_s2          = data_s2[0 +: `PRGA_YAMI_FMC_DATA_WIDTH];

endmodule
