// Automatically generated by PRGA's RTL generator

/*
* Memory Protection Layer in system clock domain (frontend).
*/

`include "prga_utils.vh"
`include "prga_yami.vh"
`default_nettype none

module prga_yami_fe (
    // -- Interface Ctrl -----------------------------------------------------
    input wire                                          clk
    , input wire                                        rst_n

    // -- Ctrl Registers -----------------------------------------------------
    , output reg                                        creg_req_rdy
    , input wire                                        creg_req_vld
    , input wire                                        creg_req_we
    , input wire [`PRGA_YAMI_CREG_ADDR_WIDTH-1:0]       creg_req_addr
    , input wire [`PRGA_YAMI_CREG_DATA_WIDTH-1:0]       creg_req_data

    , input wire                                        creg_resp_rdy
    , output reg                                        creg_resp_vld
    , output wire [`PRGA_YAMI_CREG_DATA_WIDTH-1:0]      creg_resp_data

    // -- FIFO ---------------------------------------------------------------
    , input wire                                        fifo_mfc_full
    , output reg                                        fifo_mfc_wr
    , output reg [`PRGA_YAMI_MFC_FIFO_ELEM_WIDTH-1:0]   fifo_mfc_data

    , output reg                                        fifo_fmc_rd
    , input wire                                        fifo_fmc_empty
    , input wire [`PRGA_YAMI_FMC_FIFO_ELEM_WIDTH-1:0]   fifo_fmc_data

    // -- FMC (fabric-memory channel) ----------------------------------------
    , input wire                                        fmc_rdy
    , output reg                                        fmc_vld
    , output wire [`PRGA_YAMI_MTHREAD_ID_WIDTH-1:0]     fmc_thread_id
    , output wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]        fmc_type
    , output wire [`PRGA_YAMI_SIZE_WIDTH-1:0]           fmc_size
    , output wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]       fmc_addr
    , output wire [`PRGA_YAMI_FMC_DATA_WIDTH-1:0]       fmc_data
    , output wire [1:0]                                 fmc_l1rplway

    // -- MFC (memory-fabric channel) ----------------------------------------
    , output reg                                        mfc_rdy
    , input wire                                        mfc_vld
    , input wire [`PRGA_YAMI_MTHREAD_ID_WIDTH-1:0]      mfc_thread_id
    , input wire [`PRGA_YAMI_RESPTYPE_WIDTH-1:0]        mfc_type
    , input wire [`PRGA_YAMI_MFC_ADDR_WIDTH-1:0]        mfc_addr
    , input wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]        mfc_data
    , input wire                                        mfc_l1invall
    , input wire [1:0]                                  mfc_l1invway
    );

    // =======================================================================
    // == FMC channel ========================================================
    // =======================================================================

    // -- decode FIFO elemenet -----------------------------------------------
    assign fmc_thread_id        = fifo_fmc_data[`PRGA_YAMI_FMC_FIFO_MTHREAD_INDEX];
    assign fmc_type             = fifo_fmc_data[`PRGA_YAMI_FMC_FIFO_REQTYPE_INDEX];
    assign fmc_size             = fifo_fmc_data[`PRGA_YAMI_FMC_FIFO_SIZE_INDEX];
    assign fmc_addr             = fifo_fmc_data[`PRGA_YAMI_FMC_FIFO_ADDR_INDEX];
    assign fmc_data             = fifo_fmc_data[`PRGA_YAMI_FMC_FIFO_DATA_INDEX];
    assign fmc_l1rplway         = fifo_fmc_data[`PRGA_YAMI_FMC_FIFO_L1RPLWAY_INDEX];
    assign creg_resp_data       = fifo_fmc_data[`PRGA_YAMI_FMC_FIFO_DATA_INDEX];

    always @* begin
        creg_resp_vld = 1'b0;
        fifo_fmc_rd = 1'b0;
        fmc_vld = 1'b0;

        case (fmc_type)
            `PRGA_YAMI_REQTYPE_CREG_ACK: begin
                fifo_fmc_rd = creg_resp_rdy;
                creg_resp_vld = !fifo_fmc_empty;
            end

            `PRGA_YAMI_REQTYPE_LOAD,
            `PRGA_YAMI_REQTYPE_LOAD_NC,
            `PRGA_YAMI_REQTYPE_STORE,
            `PRGA_YAMI_REQTYPE_STORE_NC,
            `PRGA_YAMI_REQTYPE_AMO_LR,
            `PRGA_YAMI_REQTYPE_AMO_SC,
            `PRGA_YAMI_REQTYPE_AMO_SWAP,
            `PRGA_YAMI_REQTYPE_AMO_ADD,
            `PRGA_YAMI_REQTYPE_AMO_AND,
            `PRGA_YAMI_REQTYPE_AMO_OR,
            `PRGA_YAMI_REQTYPE_AMO_XOR,
            `PRGA_YAMI_REQTYPE_AMO_MAX,
            `PRGA_YAMI_REQTYPE_AMO_MAXU,
            `PRGA_YAMI_REQTYPE_AMO_MIN,
            `PRGA_YAMI_REQTYPE_AMO_MINU: begin
                fifo_fmc_rd = fmc_rdy;
                fmc_vld = !fifo_fmc_empty;
            end
        endcase
    end

    // =======================================================================
    // == MFC channel ========================================================
    // =======================================================================

    always @* begin
        creg_req_rdy = !fifo_mfc_full;
        mfc_rdy = !creg_req_vld && !fifo_mfc_full;
        fifo_mfc_wr = creg_req_vld || mfc_vld;
        fifo_mfc_data = { `PRGA_YAMI_MFC_FIFO_ELEM_WIDTH {1'b0} };

        if (creg_req_vld) begin
            fifo_mfc_data[`PRGA_YAMI_MFC_FIFO_RESPTYPE_INDEX] = creg_req_we
                                                                ? `PRGA_YAMI_RESPTYPE_CREG_STORE
                                                                : `PRGA_YAMI_RESPTYPE_CREG_LOAD;
            fifo_mfc_data[`PRGA_YAMI_MFC_FIFO_CREG_ADDR_INDEX] = creg_req_addr;
            fifo_mfc_data[`PRGA_YAMI_MFC_FIFO_CREG_DATA_INDEX] = creg_req_data;
        end else begin
            fifo_mfc_data[`PRGA_YAMI_MFC_FIFO_MTHREAD_INDEX] = mfc_thread_id;
            fifo_mfc_data[`PRGA_YAMI_MFC_FIFO_RESPTYPE_INDEX] = mfc_type;
            fifo_mfc_data[`PRGA_YAMI_MFC_FIFO_ADDR_INDEX] = mfc_addr;
            fifo_mfc_data[`PRGA_YAMI_MFC_FIFO_DATA_INDEX] = mfc_data;
            fifo_mfc_data[`PRGA_YAMI_MFC_FIFO_L1INVALL_INDEX] = mfc_l1invall;
            fifo_mfc_data[`PRGA_YAMI_MFC_FIFO_L1INVWAY_INDEX] = mfc_l1invway;
        end
    end

endmodule
