# -*- encoding: ascii -*-

from .common import AbstractBitstreamGenerator
import argparse, logging

__all__ = ['MagicBitstreamGenerator']

_subparser = argparse.ArgumentParser()
_subparser.add_argument('--prefix', type = str, default = 'dut')
_subparser.add_argument('--checkmode', action = 'store_true')

_logger = logging.getLogger(__name__)

class MagicBitstreamGenerator(AbstractBitstreamGenerator):
    """Bitstream generator for 'magic' programming circuitry."""

    __slots__ = ["prefix", "checkmode", "output"]

    def __init__(self, context, prefix = "dut"):
        super().__init__(context)

        self.prefix = prefix
        self.checkmode = False

    def _process_hierarchy(self, hierarchy):
        if hierarchy is None:
            return None, None

        path, bitmap = 'prog_data', None

        for i in hierarchy.hierarchy:
            if getattr(i, "prog_magic_ignore", False) or getattr(i.model, "prog_magic_ignore", False):
                return None, None

            elif (prog_bitmap := getattr(i, "prog_bitmap", self._none)) is not self._none:
                if prog_bitmap is None:
                    return None, None
                else:
                    bitmap = prog_bitmap if bitmap is None else bitmap.remap(prog_bitmap)

            else:
                path = i.name + '.' + path

        return path, bitmap

    def set_bits(self, value, hierarchy = None, *, inplace = False):
        path, bitmap = self._process_hierarchy(hierarchy)
        if path is None:
            return

        if bitmap is not None:
            value = value.remap(bitmap, inplace = inplace)

        f = "        force {x}.{p}[{h}:{o}] = {l}'h{v:x};\n"
        if self.checkmode:
            f = \
"""
        if ({x}.{p}[{h}:{o}] != {l}'h{v:x}) begin
            fail = 1'b1;
            $display("[ERROR] {x}.{p}[{h}:{o}] == {l}'h%llx != {l}'h{v:x}",
                    {x}.{p}[{h}:{o}]);
        end
"""

        for v, (o, l) in value.breakdown():
            self.output.write(f.format(
                x = self.prefix, p = path, h = o + l - 1, o = o, l = l, v = v))

    def generate_bitstream(self, fasm, output, args):
        if isinstance(output, str):
            output = open(output, "w")
        self.output = output

        ns = _subparser.parse_args(args)
        self.prefix = ns.prefix
        self.checkmode = ns.checkmode

        if self.checkmode:
            self.output.write(
"""// Automatically generated by PRGA
module prga_magic_bitstream_checker;

    reg fail;

    always @(posedge {}.prog_done) begin
        fail = 1'b0;
""".format(self.prefix))

        self.parse_fasm(fasm)

        if self.checkmode:
            self.output.write(
"""
        if (fail) begin
            $display("[ERROR] Magic bitstream check failed. See ERRORs above.");
            $finish;
        end else begin
            $display("[INFO] Magic bitstream check passed. The bitstream seems to be loaded correctly.");
        end

    end

endmodule
""")
