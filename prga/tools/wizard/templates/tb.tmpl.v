// Automatically generated by PRGA testbench generator
`timescale 1ns/1ps

// Enable post-syn if post-implementation is enabled
`ifdef PRGA_TEST_POSTIMPL
    `ifndef PRGA_TEST_POSTSYN
        `define PRGA_TEST_POSTSYN
    `endif
`endif

module prga_tb_top;

    // -----------------------------------------------------------------------
    // -- Parameters ---------------------------------------------------------
    // -----------------------------------------------------------------------
    localparam CLK_PERIOD = {{ (test.tb_clk_period|default(10)) }};

    // -----------------------------------------------------------------------
    // -- Signals and DUTs ---------------------------------------------------
    // -----------------------------------------------------------------------

    // Testbench ctrl
    reg f_tb_clk, f_tb_rst;
    wire w_tb_pass, w_tb_fail, w_tb_prog_done;

    // Logging
    reg [31:0] f_tb_verbosity, f_tb_max_cycle, f_tb_cycle_cnt;

    // -- Test ---------------------------------------------------------------
    // Signals
    {%- for port in design.ports.values() %}
    wire{% if port.range_ is not none %} [{{ port.range_.stop - port.range_.step }}:{{ port.range_.start }}]{% endif %} w_test_{{ port.name }};
    {%- endfor %}

    // Tester
    {{ test_name }} {% if test.parameters %}#(
        {%- set comma0 = joiner(",") -%}
        {%- for k, v in test.parameters.items() %}
        {{ comma0() }}.{{ k }}({{ v }})
        {%- endfor %}
    ) {% endif %}i_tester (
        .tb_clk(f_tb_clk)
        ,.tb_rst(f_tb_rst)
        ,.tb_pass(w_tb_pass)
        ,.tb_fail(w_tb_fail)
        ,.tb_prog_done(w_tb_prog_done)
        ,.tb_verbosity(f_tb_verbosity)
        ,.tb_cycle_cnt(f_tb_cycle_cnt)
        {%- for name in design.ports %}
        ,.{{ name }}(w_test_{{ name }})
        {%- endfor %}
        );

    // -- Behavioral Model ---------------------------------------------------
    // Signals
    {%- for port in design.ports.values() %}
        {%- if port.direction.is_output %}
    wire{% if port.range_ is not none %} [{{ port.range_.stop - port.range_.step }}:{{ port.range_.start }}]{% endif %} w_behav_{{ port.name }};
        {%- endif %}
    {%- endfor %}

    // DUT
    {{ design.name }} {% if design.parameters %}#(
        {%- set comma1 = joiner(",") -%}
        {%- for k, v in design.parameters.items() %}
        {{ comma1() }}.{{ k }}({{ v }})
        {%- endfor %}
    ) {% endif %}i_behav (
        {%- set comma2 = joiner(",") -%}
        {%- for name, port in design.ports.items() %}
            {%- if port.direction.is_output %}
        {{ comma2() }}.{{ name }}(w_behav_{{ name }})
            {%- else %}
        {{ comma2() }}.{{ name }}(w_test_{{ name }})
            {%- endif %}
        {%- endfor %}
        );

    // -- Post-Synthesis Model -----------------------------------------------
`ifdef PRGA_TEST_POSTSYN
    // Signals
    {%- for port in design.ports.values() %}
        {%- if port.direction.is_output %}
    wire{% if port.range_ is not none %} [{{ port.range_.stop - port.range_.step }}:{{ port.range_.start }}]{% endif %} w_postsyn_{{ port.name }};
        {%- endif %}
    {%- endfor %}

    // DUT
    postsyn i_postsyn (
        {%- set comma3 = joiner(",") -%}
        {%- for name, port in design.ports.items() %}
            {%- if port.direction.is_output %}
        {{ comma3() }}.{{ name }}(w_postsyn_{{ name }})
            {%- else %}
        {{ comma3() }}.{{ name }}(w_test_{{ name }})
            {%- endif %}
        {%- endfor %}
        );
`endif  // `ifdef PRGA_TEST_POSTSYN

    // -- Post-Implementation Model ------------------------------------------
`ifdef PRGA_TEST_POSTIMPL
    // Signals
    {%- for port in design.ports.values() %}
        {%- if port.direction.is_output %}
    wire{% if port.range_ is not none %} [{{ port.range_.stop - port.range_.step }}:{{ port.range_.start }}]{% endif %} w_impl_{{ port.name }};
        {%- endif %}
    {%- endfor %}

    // DUT
    implwrap i_postimpl (
        .tb_clk(f_tb_clk)
        ,.tb_rst(f_tb_rst)
        ,.tb_prog_done(w_tb_prog_done)
        {%- for name, port in design.ports.items() %}
            {%- if port.direction.is_output %}
        ,.{{ name }}(w_impl_{{ name }})
            {%- else %}
        ,.{{ name }}(w_test_{{ name }})
            {%- endif %}
        {%- endfor %}
        );
`else   // `ifdef PRGA_TEST_POSTIMPL
    assign w_tb_prog_done = 1'b1;
`endif  // `ifdef PRGA_TEST_POSTIMPL

    // -----------------------------------------------------------------------
    // -- Testbench Control Logic --------------------------------------------
    // -----------------------------------------------------------------------

    initial begin
        if (!$value$plusargs("verbosity=%d", f_tb_verbosity)) begin
            f_tb_verbosity = 1;
        end
        
        if (!$value$plusargs("max_cycle=%d", f_tb_max_cycle)) begin
            f_tb_max_cycle = 100_000; // 100K cycles
        end

        if (f_tb_verbosity >= 1)
            $display("[INFO] Max cycle count: %d", f_tb_max_cycle);

        f_tb_clk = 1'b0;
        f_tb_rst = 1'b0;

        #(CLK_PERIOD * 1.25) f_tb_rst = 1'b1;
        #(CLK_PERIOD * 10) f_tb_rst = 1'b0;
    end

    // Testbench clock generator
    always #(CLK_PERIOD / 2.0) f_tb_clk = ~f_tb_clk;

    // Cycle count tracking
    always @(posedge f_tb_clk) begin
        if (f_tb_rst) begin
            f_tb_cycle_cnt <= 0;
        end else begin
            f_tb_cycle_cnt <= f_tb_cycle_cnt + 1;
            if (f_tb_verbosity >= 1 && f_tb_cycle_cnt % 1_000 == 0)
                $display("[INFO] %3dK cycles passed", f_tb_cycle_cnt / 1_000);

            if (w_tb_fail) begin
                $display();
                $display("[INFO] ++=========================++");
                $display("[INFO] ||       TEST FAILED       ||");
                $display("[INFO] ++=========================++");
                $display();
                $finish;
            end else if (w_tb_pass) begin
                $display();
                $display("[INFO] ++=========================++");
                $display("[INFO] ||       TEST PASSED       ||");
                $display("[INFO] ++=========================++");
                $display();
                $finish;
            end

            if (f_tb_cycle_cnt >= f_tb_max_cycle) begin
                $display("[ERROR] Max cycle count reached, killing simulation");
                $finish;
            end
        end
    end

    // -----------------------------------------------------------------------
    // -- Wiring -------------------------------------------------------------
    // -----------------------------------------------------------------------
`ifdef PRGA_TEST_POSTIMPL
    {%- for port in design.ports.values() %}
        {%- if port.direction.is_output %}
    assign w_test_{{ port.name }} = w_impl_{{ port.name }};
        {%- endif %}
    {%- endfor %}
`else   // `ifdef PRGA_TEST_POSTIMPL
`ifdef PRGA_TEST_POSTSYN
    {%- for port in design.ports.values() %}
        {%- if port.direction.is_output %}
    assign w_test_{{ port.name }} = w_postsyn_{{ port.name }};
        {%- endif %}
    {%- endfor %}
`else   // `ifdef PRGA_TEST_POSTSYN
    {%- for port in design.ports.values() %}
        {%- if port.direction.is_output %}
    assign w_test_{{ port.name }} = w_behav_{{ port.name }};
        {%- endif %}
    {%- endfor %}
`endif  // `ifdef PRGA_TEST_POSTSYN
`endif  // `ifdef PRGA_TEST_POSTIMPL

endmodule
