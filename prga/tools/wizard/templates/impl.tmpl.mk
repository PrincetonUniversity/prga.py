# Automatically generated by PRGA Verilog-to-Bitstream Flow Generator
# ----------------------------------------------------------------------------
# -- Binaries ----------------------------------------------------------------
# ----------------------------------------------------------------------------
# Use `make PYTHON=xxx` to replace these binaries if needed
PYTHON ?= python -O
YOSYS ?= yosys
VPR ?= vpr
GENFASM ?= genfasm

# ----------------------------------------------------------------------------
# -- Make Config -------------------------------------------------------------
# ----------------------------------------------------------------------------
SHELL = /bin/bash
.SHELLFLAGS = -o pipefail -c

# ----------------------------------------------------------------------------
# -- Inputs ------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ** PRGA Database **
CONTEXT := {{ context }}
SUMMARY := {{ summary }}

# ** Application **
APP := {{ app.name }}

APP_SRCS :=
{%- for src in app.sources %}
APP_SRCS += {{ abspath(src) }}
{%- endfor %}

APP_INCS :=
{%- for dir_ in app.includes|default([]) %}
APP_INCS += $(shell find {{ abspath(dir_) }} -type f)
{%- endfor %}

# ** SYN **
SYN_SCRIPT := {{ syn.app }}

# ** PAR **
VPR_CHAN_WIDTH := {{ vpr.channel_width }}
VPR_ARCHDEF := {{ vpr.archdef }}
VPR_RRGRAPH := {{ vpr.rrgraph }}
VPR_IOCONSTRAINTS := {% if constraints is defined -%}{{ abspath(constraints.io) }}{%- endif %}

# ----------------------------------------------------------------------------
# -- Outputs -----------------------------------------------------------------
# ----------------------------------------------------------------------------
# ** SYN **
SYN_EBLIF := syn.eblif
{%- if tests is defined %}
SYN_V := postsyn.v
SYN_RESULT := $(SYN_EBLIF) $(SYN_V)
{%- else %}
SYN_RESULT := $(SYN_EBLIF)
{%- endif %}
SYN_LOG := syn.log

# ** PACK **
PACK_RESULT := pack.out
PACK_LOG := pack.log

# ** IO Constraints **
IOPLAN_RESULT := ioplan.out
IOPLAN_LOG := ioplan.log

# ** PLACE **
PLACE_RESULT := place.out
PLACE_LOG := place.log

# ** ROUTE **
ROUTE_RESULT := route.out
ROUTE_LOG := route.log

# ** FASM **
FASM_RESULT := fasm.out
FASM_LOG := fasm.log

# ** BITGEN **
BITGEN_RESULT := bitgen.out
BITGEN_LOG := bitgen.log

# ** Implementation Wrapper **
IMPLWRAP_V := implwrap.v

# ----------------------------------------------------------------------------
# -- Aggregated Variables ----------------------------------------------------
# ----------------------------------------------------------------------------
OUTPUTS := $(SYN_RESULT) $(PACK_RESULT) $(IOPLAN_RESULT) $(PLACE_RESULT) $(ROUTE_RESULT) $(FASM_RESULT) $(BITGEN_RESULT)
LOGS := $(SYN_LOG) $(PACK_LOG) $(IOPLAN_LOG) $(PLACE_LOG) $(ROUTE_LOG) $(FASM_LOG) $(BITGEN_LOG)
JUNKS := vpr_stdout.log *.rpt pack.out.post_routing

# ----------------------------------------------------------------------------
# -- Phony Rules -------------------------------------------------------------
# ----------------------------------------------------------------------------
.PHONY: all syn synth pack ioplan place route fasm bitgen bitstream implwrap disp display clean

all: $(BITGEN_RESULT)

syn: $(SYN_RESULT)

pack: $(PACK_RESULT)

ioplan: $(IOPLAN_RESULT)

place: $(PLACE_RESULT)

route: $(ROUTE_RESULT)

fasm: $(FASM_RESULT)

bitgen: $(BITGEN_RESULT)

implwrap: $(IMPLWRAP_V)

disp: $(VPR_ARCHDEF) $(VPR_RRGRAPH) $(SYN_EBLIF) $(PACK_RESULT) $(PLACE_RESULT) $(ROUTE_RESULT)
	$(VPR) $(VPR_ARCHDEF) $(SYN_EBLIF) --circuit_format eblif --constant_net_method route \
		--net_file $(PACK_RESULT) --place_file $(PLACE_RESULT) --route_file $(ROUTE_RESULT) \
		--analysis --disp on --route_chan_width $(VPR_CHAN_WIDTH) --read_rr_graph $(VPR_RRGRAPH)

clean:
	rm -rf $(OUTPUTS) $(LOGS) $(JUNKS)

# alias of 'syn'
synth: syn

# alias of 'bitgen'
bitstream: bitgen

# alias of 'disp'
display: disp

# ----------------------------------------------------------------------------
# -- Regular Rules -----------------------------------------------------------
# ----------------------------------------------------------------------------
$(SYN_RESULT): $(APP_SRCS) $(APP_INCS) $(SYN_SCRIPT)
	$(YOSYS) -c $(SYN_SCRIPT) \
		| tee $(SYN_LOG)

$(PACK_RESULT): $(VPR_ARCHDEF) $(SYN_EBLIF)
	$(VPR) $^ --circuit_format eblif --pack --net_file $@ --constant_net_method route \
		| tee $(PACK_LOG)

$(IOPLAN_RESULT): $(SUMMARY) $(SYN_EBLIF) $(VPR_IOCONSTRAINTS)
ifeq ($(VPR_IOCONSTRAINTS),)
	$(PYTHON) -m prga.tools.ioplan -c $(SUMMARY) -i $(SYN_EBLIF) -o $@ \
		| tee $(IOPLAN_LOG)
else
	$(PYTHON) -m prga.tools.ioplan -c $(SUMMARY) -i $(SYN_EBLIF) -o $@ -f $(VPR_IOCONSTRAINTS) \
		| tee $(IOPLAN_LOG)
endif

$(PLACE_RESULT): $(VPR_ARCHDEF) $(SYN_EBLIF) $(PACK_RESULT) $(IOPLAN_RESULT)
	$(VPR) $(VPR_ARCHDEF) $(SYN_EBLIF) --circuit_format eblif --constant_net_method route \
		--net_file $(PACK_RESULT) \
		--place --place_file $@ --fix_clusters $(IOPLAN_RESULT) \
		--place_delay_model delta_override --place_chan_width $(VPR_CHAN_WIDTH) \
		| tee $(PLACE_LOG)

$(ROUTE_RESULT): $(VPR_ARCHDEF) $(VPR_RRGRAPH) $(SYN_EBLIF) $(PACK_RESULT) $(PLACE_RESULT)
	$(VPR) $(VPR_ARCHDEF) $(SYN_EBLIF) --circuit_format eblif --constant_net_method route \
		--net_file $(PACK_RESULT) --place_file $(PLACE_RESULT) \
		--route --route_file $@ --route_chan_width $(VPR_CHAN_WIDTH) --read_rr_graph $(VPR_RRGRAPH) \
		| tee $(ROUTE_LOG)

$(FASM_RESULT): $(VPR_ARCHDEF) $(VPR_RRGRAPH) $(SYN_EBLIF) $(PACK_RESULT) $(PLACE_RESULT) $(ROUTE_RESULT)
	$(GENFASM) $(VPR_ARCHDEF) $(APP) \
		--circuit_file $(SYN_EBLIF) --circuit_format eblif \
		--net_file $(PACK_RESULT) --place_file $(PLACE_RESULT) --route_file $(ROUTE_RESULT) \
		--analysis --route_chan_width $(VPR_CHAN_WIDTH) --read_rr_graph $(VPR_RRGRAPH) \
		| tee $(FASM_LOG)
	mv $(APP).fasm $@

$(BITGEN_RESULT): $(SUMMARY) $(FASM_RESULT)
	$(PYTHON) -m prga.tools.bitgen -c $(CONTEXT) -f $(FASM_RESULT) -o $@

$(IMPLWRAP_V): $(SUMMARY) $(SYN_EBLIF) $(IOPLAN_RESULT)
	$(PYTHON) -m prga.tools.wizard.implwrap -c $(SUMMARY) -i $(SYN_EBLIF) -f $(IOPLAN_RESULT) -o $@
