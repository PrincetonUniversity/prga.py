// Automatically generated by PRGA's RTL generator
{% macro memport(portsuffix, addr_width, data_width) -%}
    , input wire [{{ addr_width - 1 }}:0] addr{{ portsuffix }}
    , input wire [{{ data_width - 1 }}:0] data{{ portsuffix }}
    , input wire [0:0] we{{ portsuffix }}
    , output reg [{{ data_width - 1 }}:0] out{{ portsuffix }}
{%- endmacro -%}
{% macro memproc(portsuffix, transparent) -%}
    always @(posedge clk) begin
        {% if transparent -%}
        if (we{{ portsuffix }}) begin
            mem[addr{{ portsuffix }}] <= data{{ portsuffix }};
            out{{ portsuffix }} <= data{{ portsuffix }};
        end else begin
            out{{ portsuffix }} <= mem[addr{{ portsuffix }}];
        end
        {%- else -%}
        if (we{{ portsuffix }}) begin
            mem[addr{{ portsuffix }}] <= data{{ portsuffix }};
        end

        out{{ portsuffix }} <= mem[addr{{ portsuffix }}];
        {%- endif %}
    end
{%- endmacro -%}
module {{ module.name }} (
    input wire [0:0] clk
    {% if module.dualport -%}
        {{ memport('1', module.addr_width, module.data_width) }}
        {{ memport('2', module.addr_width, module.data_width) }}
    {%- else -%}
        {{ memport('', module.addr_width, module.data_width) }}
    {%- endif %}
    );

    reg [{{ module.data_width - 1}}:0] mem [0:{{ 2 ** module.addr_width - 1 }}];

    {% if module.dualport -%}
        {{ memproc('1', module.transparent) }}

        {{ memproc('2', module.transparent) }}
    {%- else -%}
        {{ memproc('', module.transparent) }}
    {%- endif %}

endmodule
