// Automatically generated by PRGA's RTL generator
{% macro memport(portprefix, addr_width, data_width) -%}
    , input wire [{{ addr_width - 1 }}:0] {{ portprefix }}addr
    , input wire [{{ data_width - 1 }}:0] {{ portprefix }}din
    , input wire [0:0] {{ portprefix }}we
    , output reg [{{ data_width - 1 }}:0] {{ portprefix }}dout
{%- endmacro -%}
{% macro memproc(portprefix, transparent) -%}
    always @(posedge clk) begin
        {% if transparent -%}
        if ({{ portprefix }}we) begin
            data[{{ portprefix }}addr] <= {{ portprefix }}din;
            {{ portprefix }}dout <= {{ portprefix }}din;
        end else begin
            {{ portprefix }}dout <= data[{{ portprefix }}addr];
        end
        {% else -%}
        if ({{ portprefix }}we) begin
            data[{{ portprefix }}addr] <= {{ portprefix }}din;
        end

        {{ portprefix }}dout <= data[{{ portprefix }}addr];
        {% endif -%}
    end
{%- endmacro -%}
module {{ module.name }} (
    input wire [0:0] clk
    {% if module.dualport -%}
        {{ memport('a', module.addr_width, module.data_width }}
        {{ memport('b', module.addr_width, module.data_width }}
    {% else -%}
        {{ memport('', module.addr_width, module.data_width }}
    {% endif -%}
    );

    reg [{{ module.data_width - 1}}:0] data [0:{{ 2 ** module.addr_width - 1 }}];

    {% if module.dualport -%}
        {{ memproc('a', module.transparent }}

        {{ memport('b', module.transparent }}
    {% else -%}
        {{ memport('', module.transparent }}
    {% endif %}

endmodule
