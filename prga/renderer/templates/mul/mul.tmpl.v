// Automatically generated by PRGA's RTL generator
module {{ module.name }} #(
    parameter   WIDTH_A     = {{ module.ports.a|length }}
    , parameter WIDTH_B     = {{ module.ports.b|length }}
) (
    input wire [WIDTH_A - 1:0]              a
    , input wire [WIDTH_B - 1:0]            b
    , output reg [WIDTH_A + WIDTH_B - 1:0]  x

    , input wire                            prog_done
    , input wire [1:0]                      prog_data
        // [0]: enable
        // [1]: signed/not unsigned
    );

    reg                             sign_a, sign_b;
    reg [WIDTH_A - 2:0]             val_a;
    reg [WIDTH_B - 2:0]             val_b;
    reg [WIDTH_A + WIDTH_B - 3:0]   val_a_mul_b;

    always @* begin
        {sign_a, val_a} = a;
        {sign_b, val_b} = b;
    end

    always @* begin
        // trust ASIC synthesis tool
        val_a_mul_b = val_a * val_b;
    end

    always @* begin
        if (prog_done && prog_data[0]) begin
            x = {sign_a & sign_b, val_a_mul_b};

            if (sign_a)
                if (prog_data[1])
                    x = x - (val_b << (WIDTH_A - 1));
                else
                    x = x + (val_b << (WIDTH_A - 1));

            if (sign_b)
                if (prog_data[1])
                    x = x - (val_a << (WIDTH_B - 1));
                else
                    x = x + (val_a << (WIDTH_B - 1));

        end else begin
            x = {(WIDTH_A + WIDTH_B) {1'b0} };
        end
    end

endmodule

