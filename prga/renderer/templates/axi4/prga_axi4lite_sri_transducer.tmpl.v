// Automatically generated by PRGA's RTL generator

`include "prga_axi4.vh"
`default_nettype none

module prga_axi4lite_sri_transducer #(
    parameter   PRQ_DEPTH_LOG2  = 6
    , parameter ADDR_WIDTH      = 12
    , parameter DATA_BYTES_LOG2 = 3
) (
    input wire                                          clk
    , input wire                                        rst_n

    // == AXI4-Lite Interface ================================================
    // write address channel
    , input wire                                        a4l_awvalid
    , output wire                                       a4l_awready
    , input wire [ADDR_WIDTH - 1:0]                     a4l_awaddr
    , input wire [`PRGA_AXI4_AXPROT_WIDTH - 1:0]        a4l_awprot

    // write data channel
    , input wire                                        a4l_wvalid
    , output wire                                       a4l_wready
    , input wire [(1 << DATA_BYTES_LOG2) - 1:0]         a4l_wstrb
    , input wire [(8 << DATA_BYTES_LOG2) - 1:0]         a4l_wdata

    // write response channel
    , output wire                                       a4l_bvalid
    , input wire                                        a4l_bready
    , output wire [`PRGA_AXI4_XRESP_WIDTH - 1:0]        a4l_bresp

    // read address channel
    , input wire                                        a4l_arvalid
    , output wire                                       a4l_arready
    , input wire [ADDR_WIDTH - 1:0]                     a4l_araddr
    , input wire [`PRGA_AXI4_AXPROT_WIDTH - 1:0]        a4l_arprot

    // read data channel
    , output wire                                       a4l_rvalid
    , input wire                                        a4l_rready
    , output wire [`PRGA_AXI4_AXPROT_WIDTH - 1:0]       a4l_rresp
    , output wire [(8 << DATA_BYTES_LOG2) - 1:0]        a4l_rdata

    // == Simple Register Interface (SRI) ====================================
    , input wire                                        sri_req_rdy
    , output wire                                       sri_req_vld
    , output wire [ADDR_WIDTH - DATA_BYTES_LOG2 - 1:0]  sri_req_addr
    , output wire [(1 << DATA_BYTES_LOG2) - 1:0]        sri_req_wstrb
    , output wire [(8 << DATA_BYTES_LOG2) - 1:0]        sri_req_data

    , output wire                                       sri_resp_rdy
    , input wire                                        sri_resp_vld
    , input wire [(8 << DATA_BYTES_LOG2) - 1:0]         sri_resp_data
    );

    // -- AR/AW arbitration --
    wire arb_ar_awn;    // arbitration: accept AR, not AW

    prga_arb_robinfair #(
        .INDEX_WIDTH    (1)
    ) i_arb (
        .clk                (clk)
        ,.rst_n             (rst_n)
        ,.ce                (arb_ar_awn ? a4l_arready : (a4l_awready && a4l_wready))
        ,.candidates        ({a4l_arvalid, (a4l_awvalid & a4l_wvalid)})
        ,.current           (arb_ar_awn)
        );

    // -- pending response queue --
    wire                            prq_rd, prq_wr;
    wire                            prq_full, prq_empty;
    wire                            prq_arb_ar_awn;
    wire [DATA_BYTES_LOG2 - 1:0]    prq_dout, prq_din;

    prga_fifo #(
        .DEPTH_LOG2         (PRQ_DEPTH_LOG2)
        ,.DATA_WIDTH        (DATA_BYTES_LOG2 + 1)
        ,.LOOKAHEAD         (1)
    ) i_lraq (
        .clk                (clk)
        ,.rst               (~rst_n)
        ,.full              (prq_full)
        ,.wr                (prq_wr)
        ,.din               ({arb_ar_awn, prq_din})
        ,.empty             (prq_empty)
        ,.rd                (prq_rd)
        ,.dout              ({prq_arb_ar_awn, prq_dout})
        );

    // -- SRI request --
    assign sri_req_vld = arb_ar_awn ? (a4l_arvalid && !prq_full) :
                                      (a4l_awvalid && a4l_wvalid && !prq_full);
    assign sri_req_addr = arb_ar_awn ? a4l_araddr[ADDR_WIDTH - 1:DATA_BYTES_LOG2] :
                                       a4l_awaddr[ADDR_WIDTH - 1:DATA_BYTES_LOG2];
    assign sri_req_wstrb = arb_ar_awn ? { (1 << DATA_BYTES_LOG2) {1'b0} } :
                                        (a4l_wstrb << a4l_awaddr[0 +: DATA_BYTES_LOG2]);
    assign sri_req_data = a4l_wdata << {a4l_awaddr[0 +: DATA_BYTES_LOG2], 3'b0};
    assign prq_wr = arb_ar_awn ? (sri_req_rdy && a4l_arvalid) :
                                 (sri_req_rdy && a4l_awvalid && a4l_wvalid);
    assign prq_din = a4l_araddr[0 +: DATA_BYTES_LOG2];
    assign a4l_arready = arb_ar_awn && !prq_full && sri_req_rdy;
    assign a4l_awready = ~arb_ar_awn && a4l_wvalid && !prq_full && sri_req_rdy;
    assign a4l_wready = ~arb_ar_awn && a4l_awvalid && !prq_full && sri_req_rdy;

    // -- SRI response --
    assign a4l_bvalid = !prq_empty && !prq_arb_ar_awn && sri_resp_vld;
    assign a4l_bresp = `PRGA_AXI4_XRESP_OKAY;
    assign a4l_rvalid = !prq_empty && prq_arb_ar_awn && sri_resp_vld;
    assign a4l_rresp = `PRGA_AXI4_XRESP_OKAY;
    assign a4l_rdata = {sri_resp_data, sri_resp_data} >> {prq_dout, 3'b0};  // rotate. also deal with subword replication
    assign sri_resp_rdy = prq_arb_ar_awn ? (!prq_empty && a4l_rready) :
                                           (!prq_empty && a4l_bready);
    assign prq_rd = prq_arb_ar_awn ? (sri_resp_vld && a4l_rready) :
                                     (sri_resp_vld && a4l_bready);

endmodule
