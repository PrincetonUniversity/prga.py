// Automatically generated by PRGA's RTL generator
`timescale 1ns/1ps
module prga_arb_robinfair (clk, rst_n, ce, candidates, current, next);
    
    parameter   INDEX_WIDTH = 1;
    parameter   NUM_CANDIDATES = 0;

    localparam  ALIGNED_NUM_CANDIDATES = 1 << INDEX_WIDTH;
    localparam  ACTUAL_NUM_CANDIDATES = NUM_CANDIDATES == 0 ? ALIGNED_NUM_CANDIDATES : NUM_CANDIDATES;

    input wire                              clk, rst_n, ce;
    input wire [ACTUAL_NUM_CANDIDATES-1:0]  candidates;
    output reg [INDEX_WIDTH-1:0]            current;
    output wire [INDEX_WIDTH-1:0]           next;

    reg                                     current_vld;

    always @* begin
        current_vld = candidates[current];
    end

    always @(posedge clk) begin
        if (~rst_n) begin
            current <= { INDEX_WIDTH {1'b0} };
        end else if (!current_vld || ce) begin
            current <= next;
        end
    end

    wire [ALIGNED_NUM_CANDIDATES-1:0]   candidates_aligned, candidates_prioritized;
    generate
        if (ALIGNED_NUM_CANDIDATES > ACTUAL_NUM_CANDIDATES)
            assign candidates_aligned = { { (ALIGNED_NUM_CANDIDATES - ACTUAL_NUM_CANDIDATES) {1'b0} }, candidates };
        else
            assign candidates_aligned = candidates;
    endgenerate

    assign candidates_prioritized = {candidates_aligned, candidates_aligned} >> (current + 1);

    wire [INDEX_WIDTH-1:0]              tzc;    // trailing zero count
    wire                                tzc_invld;

    prga_tzc #(
        .COUNTER_WIDTH  (INDEX_WIDTH)
    ) i_tzc (
        .data_i         (candidates_prioritized)
        ,.cnt_o         (tzc)
        ,.all_zero_o    (tzc_invld)
        );

    assign next = tzc_invld ? current : (current + tzc + 1);

endmodule
