// Automatically generated by PRGA's RTL generator
module prga_fifo_rdbuf #(
    parameter   REGISTERED = 1
    , parameter DECOUPLED = 0
    , parameter DATA_WIDTH = 32
    , parameter INPUT_LOOKAHEAD = 1
    , parameter OUTPUT_LOOKAHEAD = 1
) (
    input wire                          clk
    , input wire                        rst_n

    , output wire                       rd_o
    , input wire                        empty_i
    , input wire [DATA_WIDTH - 1:0]     data_i

    , input wire                        rd_i
    , output wire                       empty_o
    , output wire [DATA_WIDTH - 1:0]    data_o
    );

    wire                    rd_o_la, rd_i_la, empty_i_la, buf_val_o;
    wire [DATA_WIDTH - 1:0] data_i_la, data_o_la;

    generate
        if (INPUT_LOOKAHEAD) begin
            assign rd_o = rd_o_la;
            assign empty_i_la = empty_i;
            assign data_i_la = data_i;
        end else begin
            prga_fifo_lookahead_buffer #(
                .DATA_WIDTH (DATA_WIDTH)
            ) i_labuf_i (
                .clk        (clk)
                ,.rst       (~rst_n)
                ,.empty_i   (empty_i)
                ,.rd_i      (rd_o)
                ,.dout_i    (data_i)
                ,.empty     (empty_i_la)
                ,.rd        (rd_o_la)
                ,.dout      (data_i_la)
                );
        end
    endgenerate

    prga_valrdy_buf #(
        .REGISTERED     (REGISTERED)
        ,.DECOUPLED     (DECOUPLED)
        ,.DATA_WIDTH    (DATA_WIDTH)
    ) i_buf (
        .clk            (clk)
        ,.rst           (~rst_n)         
        ,.rdy_o         (rd_o_la)
        ,.val_i         (~empty_i_la)
        ,.data_i        (data_i_la)
        ,.rdy_i         (rd_i_la)
        ,.val_o         (buf_val_o)
        ,.data_o        (data_o_la)
        );

    generate
        if (OUTPUT_LOOKAHEAD) begin
            assign rd_i_la = rd_i;
            assign empty_o = ~buf_val_o;
            assign data_o = data_o_la;
        end else begin
            prga_fifo_lookahead_buffer #(
                .DATA_WIDTH (DATA_WIDTH)
                ,.REVERSED  (1)
            ) i_labuf_o (
                .clk        (clk)
                ,.rst       (~rst_n)
                ,.empty_i   (~buf_val_o)
                ,.rd_i      (rd_i_la)
                ,.dout_i    (data_o_la)
                ,.empty     (empty_o)
                ,.rd        (rd_i)
                ,.dout      (data_o)
                );
        end
    endgenerate

endmodule
