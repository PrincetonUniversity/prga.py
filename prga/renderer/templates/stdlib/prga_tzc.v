// Automatically generated by PRGA's RTL generator
`timescale 1ns/1ps
// trailing zero count
module prga_tzc (data_i, cnt_o, all_zero_o);

    parameter   COUNTER_WIDTH = 1;
    parameter   DATA_WIDTH = 0;

    localparam  ALIGNED_DATA_WIDTH = 1 << COUNTER_WIDTH;
    localparam  ACTUAL_DATA_WIDTH = DATA_WIDTH == 0 ? ALIGNED_DATA_WIDTH : DATA_WIDTH;

    input wire [ACTUAL_DATA_WIDTH-1:0]  data_i;
    output wire [COUNTER_WIDTH-1:0]     cnt_o;
    output wire                         all_zero_o;

    assign all_zero_o = ~|data_i;

    wire [ACTUAL_DATA_WIDTH-1:0]        data_onehot_i;

    genvar gv_onehot;
    generate
        assign data_onehot_i[0] = data_i[0];

        for (gv_onehot = 1;
            gv_onehot < ACTUAL_DATA_WIDTH;
            gv_onehot = gv_onehot + 1
        ) begin: g_onehot
            assign data_onehot_i[gv_onehot] = data_i[gv_onehot] && ~|data_i[0+:gv_onehot];
        end
    endgenerate

    prga_onehot_decoder #(
        .INDEX_WIDTH    (COUNTER_WIDTH)
        ,.DATA_WIDTH    (ACTUAL_DATA_WIDTH)
    ) i_onehot_decoder (
        .data_i         (data_onehot_i)
        ,.idx_o         (cnt_o)
        );

endmodule
