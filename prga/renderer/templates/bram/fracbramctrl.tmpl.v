// Automatically generated by PRGA's RTL generator
module {{ module.name }} #(
    parameter   ADDR_WIDTH = {{ module.addr_width }}
    , parameter DATA_WIDTH = {{ module.data_width }}
    , parameter CORE_ADDR_WIDTH = {{ module.core_addr_width }}
) (
    input wire clk

    // user interface
    , input wire [ADDR_WIDTH - 1:0]         u_waddr_i
    , input wire                            u_we_i
    , input wire [DATA_WIDTH - 1:0]         u_din_i
    , input wire [ADDR_WIDTH - 1:0]         u_raddr_i
    , output reg [DATA_WIDTH - 1:0]         u_dout_o

    // SRAM IP interface
    , output reg [CORE_ADDR_WIDTH - 1:0]    ip_waddr_o
    , output reg                            ip_we_o
    , output reg [DATA_WIDTH - 1:0]         ip_din_o
    , output reg [DATA_WIDTH - 1:0]         ip_bw_o
    , output reg [CORE_ADDR_WIDTH - 1:0]    ip_raddr_o
    , output reg                            ip_re_o
    , input wire [DATA_WIDTH - 1:0]         ip_dout_i

    , input wire [0:0] prog_done
    , input wire [{{ module.prog_data_width - 1 }}:0] prog_data
    );

    // sub-words
    localparam  DATA_WIDTH_SR0 = DATA_WIDTH;
    localparam  DATA_OFFSET_SR0_0 = 0;

    wire [DATA_WIDTH_SR0 - 1:0] dout_sr0 [0:0];
    assign dout_sr0[0] = ip_dout_i;
    {%- for i in range(1, module.addr_width - module.core_addr_width + 1) %}

    localparam  DATA_WIDTH_SR{{ i }} = DATA_WIDTH_SR{{ i - 1 }} >> 1;
        {%- for j in range(2 ** i) %}
    localparam  DATA_OFFSET_SR{{ i }}_{{ j }} = DATA_OFFSET_SR{{ i - 1 }}_{{ j // 2 }} + {{ j % 2 }} * DATA_WIDTH_SR{{ i }};
        {%- endfor %}

    wire [DATA_WIDTH_SR{{ i }} - 1:0] dout_sr{{ i }} [0:{{ 2 ** i - 1 }}];
        {%- for j in range(2 ** i) %}
    assign dout_sr{{ i }}[{{ j }}] = dout_sr{{ i - 1 }}[{{ j // 2 }}][{{ j % 2 }} * DATA_WIDTH_SR{{ i }} +: DATA_WIDTH_SR{{ i }}];
        {%- endfor %}
    {%- endfor %}

    // modes
    reg [ADDR_WIDTH - CORE_ADDR_WIDTH - 1:0]     wr_offset, rd_offset, rd_offset_f;

    integer i;
    always @*
        for (i = 0; i < ADDR_WIDTH - CORE_ADDR_WIDTH; i = i + 1) begin
            wr_offset[i] = u_waddr_i[ADDR_WIDTH - 1 - i];
            rd_offset[i] = u_raddr_i[ADDR_WIDTH - 1 - i];
        end

    always @(posedge clk) begin
        if (~prog_done) begin
            rd_offset_f     <= {(ADDR_WIDTH - CORE_ADDR_WIDTH) {1'b0} };
        end else begin
            rd_offset_f     <= rd_offset;
        end
    end

    always @* begin
        if (~prog_done) begin
            ip_waddr_o  = {CORE_ADDR_WIDTH {1'b0} };
            ip_raddr_o  = {CORE_ADDR_WIDTH {1'b0} };
            ip_we_o     = 1'b0;
            ip_re_o     = 1'b0;
            ip_din_o    = {DATA_WIDTH {1'b0} };
            ip_bw_o     = {DATA_WIDTH {1'b0} };
            u_dout_o    = {DATA_WIDTH {1'b0} };
        end else begin
            ip_waddr_o  = u_waddr_i[0 +: CORE_ADDR_WIDTH];
            ip_raddr_o  = u_raddr_i[0 +: CORE_ADDR_WIDTH];
            ip_we_o     = 1'b0;
            ip_re_o     = 1'b0;
            ip_din_o    = u_din_i;
            ip_bw_o     = {DATA_WIDTH {1'b1} };
            u_dout_o    = ip_dout_i;

            {% set endelse = joiner("end else ") %}
            {%- for mode_name, (prog_enable, sr) in module.modes.items() %}
            {{ endelse() }}if ({{ prog_enable.value }} == {
                {%- set comma2 = joiner(", ") -%}
                {%- for _, (o, l) in prog_enable.bitmap._bitmap[:-1] -%}
                {{ comma2() }}prog_data[{{ o }}+:{{ l }}]
                {%- endfor -%}
            }) begin
                // mode: {{ mode_name }}
                ip_we_o  = u_we_i;
                ip_re_o  = 1'b1;

                {% if sr == 0 %}
                ip_din_o = u_din_i;
                ip_bw_o  = {DATA_WIDTH {1'b1} };
                u_dout_o  = ip_dout_i;
                {%- else %}
                case (wr_offset[ADDR_WIDTH - CORE_ADDR_WIDTH - 1 -: {{ sr }}])
                    {%- for i in range(2 ** sr) %}
                    {{ sr }}'d{{ i }}: begin
                        ip_din_o = u_din_i[0 +: DATA_WIDTH_SR{{ sr }}] << DATA_OFFSET_SR{{ sr }}_{{ i }};
                        ip_bw_o = {DATA_WIDTH_SR{{ sr }} {1'b1} } << DATA_OFFSET_SR{{ sr }}_{{ i }};
                    end
                    {%- endfor %}
                endcase

                case (rd_offset_f[ADDR_WIDTH - CORE_ADDR_WIDTH - 1 -: {{ sr }}])
                    {%- for i in range(2 ** sr) %}
                    {{ sr }}'d{{ i }}: u_dout_o = dout_sr{{ sr }}[{{ i }}];
                    {%- endfor %}
                endcase
                {%- endif %}
            {%- endfor %}
            end
        end
    end

endmodule
