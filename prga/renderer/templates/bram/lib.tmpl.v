// Automatically generated by PRGA's blackbox library generator
{% macro memport(portsuffix) -%}
    , input wire [ADDR_WIDTH - 1:0] addr{{ portsuffix }}
    , input wire data{{ portsuffix }}
    , input wire we{{ portsuffix }}
    , output reg out{{ portsuffix }}
{%- endmacro -%}
{% macro memproc(portsuffix) -%}
    // convert 'x' or 'z' to random value in simulation
    reg internal_we{{ portsuffix }};
    reg [ADDR_WIDTH - 1:0] internal_addr{{ portsuffix }};

    always @* begin
        internal_we{{ portsuffix }} = we{{ portsuffix }};
        internal_addr{{ portsuffix }} = addr{{ portsuffix }};

        // synopsys translate_off
        if (we{{ portsuffix }} === 1'bx || we{{ portsuffix }} === 1'bz) begin
            internal_we{{ portsuffix }} = $random % 2;
        end
        {% for i in range(addr_width) %}
        if (addr{{ portsuffix }}[{{ i }}] === 1'bx || addr{{ portsuffix }}[{{ i }}] === 1'bz) begin
            internal_addr{{ portsuffix }}[{{ i }}] = $random % 2;
        end
        {%- endfor %}
        // synopsys translate_on
    end

    always @(posedge clk) begin
        if (internal_we{{ portsuffix }}) begin
            mem[internal_addr{{ portsuffix }}] <= data{{ portsuffix }};
        end

        out{{ portsuffix }} <= mem[internal_addr{{ portsuffix }}];
    end
{%- endmacro -%}
{%- set dualport = "addr1" in module.ports %}
`timescale 1ns/1ps
module {{ module.vpr_model }} #(
    {% if dualport %}
    parameter   ADDR_WIDTH = {{ module.ports.addr1|length }};
    {%- else %}
    parameter   ADDR_WIDTH = {{ module.ports.addr|length }};
    {%- endif %}
) (
    input wire [0:0] clk
    {% if dualport -%}
        {{ memport('1') }}
        {{ memport('2') }}
    {%- else -%}
        {{ memport('') }}
    {%- endif %}
    );

    localparam  NUM_ROWS = 1 << ADDR_WIDTH;

    reg mem [0:NUM_ROWS - 1];

    integer i;
    initial
        for (i = 0; i < NUM_ROWS; i = i + 1)
            mem[i] = $unsigned($random) % 2;

    {% if dualport -%}
        {{ memproc('1') }}

        {{ memproc('2') }}
    {%- else -%}
        {{ memproc('') }}
    {%- endif %}

endmodule

