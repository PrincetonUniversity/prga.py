// Automatically generated by PRGA's blackbox library generator
`timescale 1ns/1ps
{%- set addr_width = module.ports.waddr|length %}
{%- set data_width = module.ports.din|length %}
module {{ module.vpr_model }} #(
    parameter   ADDR_WIDTH = {{ addr_width }}
    , parameter DATA_WIDTH = {{ data_width }}
    , parameter INIT = { {{ data_width * (2 ** addr_width) }} {1'bx} }
) (
    input wire clk

    , input wire we
    , input wire [ADDR_WIDTH - 1:0] waddr
    , input wire [DATA_WIDTH - 1:0] din

    , input wire [ADDR_WIDTH - 1:0] raddr
    , output reg [DATA_WIDTH - 1:0] dout
    );

    localparam  NUM_ROWS = 1 << ADDR_WIDTH;

    reg [DATA_WIDTH - 1:0] data [0:NUM_ROWS - 1];

`ifndef PRGA_POSTSYN_NO_MEMINIT
    integer ibit_dout;
    initial begin
        for (ibit_dout = 0; ibit_dout < DATA_WIDTH; ibit_dout = ibit_dout + 1)
            dout[ibit_dout] = $unsigned($random) % 2;
    end
`endif

    integer iword_data, ibit_data;
    initial begin
        for (iword_data = 0; iword_data < NUM_ROWS; iword_data = iword_data + 1)
            for (ibit_data = 0; ibit_data < DATA_WIDTH; ibit_data = ibit_data + 1)
`ifndef PRGA_POSTSYN_NO_MEMINIT
                if (INIT[iword_data * DATA_WIDTH + ibit_data] === 1'bx)
                    data[iword_data][ibit_data] = $unsigned($random) % 2;
                else
`endif
                    data[iword_data][ibit_data] = INIT[iword_data * DATA_WIDTH + ibit_data];
    end

    always @(posedge clk) begin
        if (we) begin
            data[waddr] <= din;
        end

        dout <= data[raddr];
    end

endmodule

