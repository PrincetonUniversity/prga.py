// Automatically generated by PRGA's RTL generator
`timescale 1ns/1ps
module {{ module.name }} #(
    parameter   ADDR_WIDTH = {{ module.ports.waddr|length }}
    , parameter DATA_WIDTH = {{ module.ports.din|length }}
) (
    input wire [0:0] clk

    , input wire [ADDR_WIDTH - 1:0] waddr
    , input wire [0:0]              we
    , input wire [DATA_WIDTH - 1:0] din

    , input wire [ADDR_WIDTH - 1:0] raddr
    , output reg [DATA_WIDTH - 1:0] dout

    , input wire [0:0] prog_done
    , input wire [{{ module.ports.prog_data|length - 1 }}:0] prog_data
    );

    // non-fracturable memory core
    localparam  CORE_ADDR_WIDTH = {{ module.core_addr_width }};

    reg [CORE_ADDR_WIDTH - 1:0]     int_waddr, int_raddr;
    reg                             int_we, int_re;
    reg [DATA_WIDTH - 1:0]          int_din, int_bw;
    wire [DATA_WIDTH - 1:0]         int_dout;

    {{ i_ram.model.name }} {% if i_ram.parameters %}#(
        {%- set comma = joiner(",") %}
        {%- for k, v in i_ram.parameters.items() %}
        {{ comma() }}.{{ k }} ({{ v }})
        {%- endfor %}
    ){% endif %}i_ram (
        .clk                        (clk)
        ,.waddr                     (int_waddr)
        ,.din                       (int_din)
        ,.we                        (int_we)
        ,.bw                        (int_bw)
        ,.raddr                     (int_raddr)
        ,.re                        (int_re)
        ,.dout                      (int_dout)
        ,.prog_done                 (prog_done)
        );

    // sub-words
    localparam  DATA_WIDTH_SR0 = DATA_WIDTH;
    localparam  DATA_OFFSET_SR0_0 = 0;

    wire [DATA_WIDTH_SR0 - 1:0] dout_sr0 [0:0];
    assign dout_sr0[0] = int_dout;
    {%- for i in range(1, module.ports.waddr|length - module.core_addr_width + 1) %}

    localparam  DATA_WIDTH_SR{{ i }} = DATA_WIDTH_SR{{ i - 1 }} >> 1;
        {%- for j in range(2 ** i) %}
    localparam  DATA_OFFSET_SR{{ i }}_{{ j }} = DATA_OFFSET_SR{{ i - 1 }}_{{ j // 2 }} + {{ j % 2 }} * DATA_WIDTH_SR{{ i }};
        {%- endfor %}

    wire [DATA_WIDTH_SR{{ i }} - 1:0] dout_sr{{ i }} [0:{{ 2 ** i - 1 }}];
        {%- for j in range(2 ** i) %}
    assign dout_sr{{ i }}[{{ j }}] = dout_sr{{ i - 1 }}[{{ j // 2 }}][{{ j % 2 }} * DATA_WIDTH_SR{{ i }} +: DATA_WIDTH_SR{{ i }}];
        {%- endfor %}
    {%- endfor %}

    // modes
    reg [ADDR_WIDTH - CORE_ADDR_WIDTH - 1:0]     wr_offset, rd_offset, rd_offset_f;

    integer i;
    always @*
        for (i = 0; i < ADDR_WIDTH - CORE_ADDR_WIDTH; i = i + 1) begin
            wr_offset[i] = waddr[ADDR_WIDTH - 1 - i];
            rd_offset[i] = raddr[ADDR_WIDTH - 1 - i];
        end

    always @(posedge clk) begin
        if (~prog_done) begin
            rd_offset_f     <= {(ADDR_WIDTH - CORE_ADDR_WIDTH) {1'b0} };
        end else begin
            rd_offset_f     <= rd_offset;
        end
    end

    always @* begin
        if (~prog_done) begin
            int_waddr   = {CORE_ADDR_WIDTH {1'b0} };
            int_raddr   = {CORE_ADDR_WIDTH {1'b0} };
            int_we      = 1'b0;
            int_re      = 1'b0;
            int_din     = {DATA_WIDTH {1'b0} };
            int_bw      = {DATA_WIDTH {1'b0} };
            dout        = {DATA_WIDTH {1'b0} };
        end else begin
            int_waddr   = waddr[0 +: CORE_ADDR_WIDTH];
            int_raddr   = raddr[0 +: CORE_ADDR_WIDTH];
            int_we      = 1'b0;
            int_re      = 1'b0;
            int_din     = din;
            int_bw      = {DATA_WIDTH {1'b1} };
            dout        = int_dout;

            {% set endelse = joiner("end else ") %}
            {%- for mode_name, (prog_enable, sr) in module.modes.items() %}
            {{ endelse() }}if ({{ prog_enable.value }} == {
                {%- set comma2 = joiner(", ") -%}
                {%- for o, l in prog_enable.bitmap._bitmap -%}
                {{ comma2() }}prog_data[{{ o }}+:{{ l }}]
                {%- endfor -%}
            }) begin
                // mode: {{ mode_name }}
                int_we  = we;
                int_re  = 1'b1;

                {% if sr == 0 %}
                int_din = din;
                int_bw  = {DATA_WIDTH {1'b1} };
                dout    = int_dout;
                {%- else %}
                int_din = din[0 +: DATA_WIDTH_SR{{ sr }}] << DATA_OFFSET_SR{{ sr }}_{{ 

                case (wr_offset[ADDR_WIDTH - CORE_ADDR_WIDTH - 1 -: {{ sr }}])
                    {%- for i in range(2 ** sr) %}
                    {{ sr }}'d{{ i }}: begin
                        int_din = din[0 +: DATA_WIDTH_SR{{ sr }}] << DATA_OFFSET_SR{{ sr }}_{{ i }};
                        int_bw = {DATA_WIDTH_SR{{ sr }} {1'b1} } << DATA_OFFSET_SR{{ sr }}_{{ i }};
                        dout = dout_sr{{ sr }}[{{ i }}];
                    end
                    {%- endfor %}
                endcase
                {%- endif %}
            {%- endfor %}
            end
        end
    end

endmodule
