// Automatically generated by PRGA's RTL generator

`default_nettype none

module prga_sri_demux #(
    parameter SLAVE_ADDR_WIDTH  = 12
    , parameter DATA_BYTES_LOG2 = 3
    , parameter PRQ_DEPTH_LOG2  = 6
) (
    input wire                                          clk
    , input wire                                        rst_n

    // == Simple Register Interface (SRI): slave =============================
    , output wire                                       s_req_rdy
    , input wire                                        s_req_vld
    , input wire [SLAVE_ADDR_WIDTH:0]                   s_req_addr
    , input wire [(1 << DATA_BYTES_LOG2) - 1:0]         s_req_wstrb
    , input wire [(8 << DATA_BYTES_LOG2) - 1:0]         s_req_data

    , input wire                                        s_resp_rdy
    , output wire                                       s_resp_vld
    , output wire [(8 << DATA_BYTES_LOG2) - 1:0]        s_resp_data

    // == SRI master 0 (addr[SLAVE_ADDR_WIDTH] == 0) =========================
    , input wire                                        m0_req_rdy
    , output wire                                       m0_req_vld
    , output wire [SLAVE_ADDR_WIDTH - 1:0]              m0_req_addr
    , output wire [(1 << DATA_BYTES_LOG2) - 1:0]        m0_req_wstrb
    , output wire [(8 << DATA_BYTES_LOG2) - 1:0]        m0_req_data

    , output wire                                       m0_resp_rdy
    , input wire                                        m0_resp_vld
    , input wire [(8 << DATA_BYTES_LOG2) - 1:0]         m0_resp_data

    // == SRI master 1 (addr[SLAVE_ADDR_WIDTH] == 1) =========================
    , input wire                                        m1_req_rdy
    , output wire                                       m1_req_vld
    , output wire [SLAVE_ADDR_WIDTH - 1:0]              m1_req_addr
    , output wire [(1 << DATA_BYTES_LOG2) - 1:0]        m1_req_wstrb
    , output wire [(8 << DATA_BYTES_LOG2) - 1:0]        m1_req_data

    , output wire                                       m1_resp_rdy
    , input wire                                        m1_resp_vld
    , input wire [(8 << DATA_BYTES_LOG2) - 1:0]         m1_resp_data
    );

    // -- request distribution --
    wire                            prq_rd, prq_wr;
    wire                            prq_full, prq_empty;
    wire                            prq_resp_src;

    prga_fifo #(
        .DEPTH_LOG2     (PRQ_DEPTH_LOG2)
        ,.DATA_WIDTH    (1)
        ,.LOOKAHEAD     (1)
    ) i_prq (
        .clk                (clk)
        ,.rst               (~rst_n)
        ,.full              (prq_full)
        ,.wr                (prq_wr)
        ,.din               (s_req_addr[SLAVE_ADDR_WIDTH])
        ,.empty             (prq_empty)
        ,.rd                (prq_rd)
        ,.dout              (prq_resp_src)
        );

    assign s_req_rdy = !prq_full && (s_req_addr[SLAVE_ADDR_WIDTH] ? m1_req_rdy : m0_req_rdy);
    assign m0_req_vld = s_req_vld && !prq_full && ~s_req_addr[SLAVE_ADDR_WIDTH];
    assign m0_req_addr = s_req_addr[0+:SLAVE_ADDR_WIDTH];
    assign m0_req_wstrb = s_req_wstrb;
    assign m0_req_data = s_req_data;
    assign m1_req_vld = s_req_vld && !prq_full && s_req_addr[SLAVE_ADDR_WIDTH];
    assign m1_req_addr = s_req_addr[0+:SLAVE_ADDR_WIDTH];
    assign m1_req_wstrb = s_req_wstrb;
    assign m1_req_data = s_req_data;
    assign prq_wr = s_req_vld && (s_req_addr[SLAVE_ADDR_WIDTH] ? m1_req_rdy : m0_req_rdy);

    // -- response muxing --
    assign s_resp_vld = !prq_empty && (prq_resp_src ? m1_resp_vld : m0_resp_vld);
    assign s_resp_data = prq_resp_src ? m1_resp_data : m0_resp_data;
    assign m0_resp_rdy = !prq_empty && ~prq_resp_src && s_resp_rdy;
    assign m1_resp_rdy = !prq_empty &&  prq_resp_src && s_resp_rdy;
    assign prq_rd = s_resp_rdy && (prq_resp_src ? m1_resp_vld : m0_resp_vld);

endmodule
