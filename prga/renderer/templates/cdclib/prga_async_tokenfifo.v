// Automatically generated by PRGA's RTL generator
//  Async FIFO but without data
`timescale 1ns/1ps
module prga_async_tokenfifo #(
    parameter DEPTH_LOG2 = 1
) (
    input wire [0:0] wclk,
    input wire [0:0] wrst,
    output wire [0:0] full,
    input wire [0:0] wr,

    input wire [0:0] rclk,
    input wire [0:0] rrst,
    output wire [0:0] empty,
    input wire [0:0] rd
    );

    // Assumption: wrst and rrst are both "async assertion, sync deassertion"

    // counters
    reg [DEPTH_LOG2:0]  b_wptr_wclk, g_wptr_wclk, g_wptr_rclk_s0, g_wptr_rclk_s1, b_wptr_rclk,
                        b_rptr_rclk, g_rptr_rclk, g_rptr_wclk_s0, g_rptr_wclk_s1, b_rptr_wclk;

    localparam FIFO_DEPTH = 1 << DEPTH_LOG2;

    // gray-to-binary converting logic
    wire [DEPTH_LOG2:0] b_wptr_rclk_next, b_rptr_wclk_next;

    genvar i;
    generate
        for (i = 0; i < DEPTH_LOG2 + 1; i = i + 1) begin: b2g
            assign b_wptr_rclk_next[i] = ^(g_wptr_rclk_s1 >> i);
            assign b_rptr_wclk_next[i] = ^(g_rptr_wclk_s1 >> i);
        end
    endgenerate

    // write-domain
    always @(posedge wclk) begin
        if (wrst) begin
            b_wptr_wclk <= 'b0;
            g_wptr_wclk <= 'b0;
            g_rptr_wclk_s0 <= 'b0;
            g_rptr_wclk_s1 <= 'b0;
            b_rptr_wclk <= 'b0;
        end else begin
            if (~full && wr) begin
                b_wptr_wclk <= b_wptr_wclk + 1;
            end

            g_wptr_wclk <= b_wptr_wclk ^ (b_wptr_wclk >> 1);
            g_rptr_wclk_s0 <= g_rptr_rclk;
            g_rptr_wclk_s1 <= g_rptr_wclk_s0;
            b_rptr_wclk <= b_rptr_wclk_next;
        end
    end

    // read-domain
    always @(posedge rclk) begin
        if (rrst) begin
            b_rptr_rclk <= 'b0;
            g_rptr_rclk <= 'b0;
            g_wptr_rclk_s0 <= 'b0;
            g_wptr_rclk_s1 <= 'b0;
            b_wptr_rclk <= 'b0;
        end else begin
            if (~empty && rd) begin
                b_rptr_rclk <= b_rptr_rclk + 1;
            end

            g_rptr_rclk <= b_rptr_rclk ^ (b_rptr_rclk >> 1);
            g_wptr_rclk_s0 <= g_wptr_wclk;
            g_wptr_rclk_s1 <= g_wptr_rclk_s0;
            b_wptr_rclk <= b_wptr_rclk_next;
        end
    end

    assign full = wrst || b_rptr_wclk == {~b_wptr_wclk[DEPTH_LOG2], b_wptr_wclk[0 +: DEPTH_LOG2]};
    assign empty = rrst || b_rptr_rclk == b_wptr_rclk;

endmodule
