// Automatically generated by PRGA's RTL generator
`timescale 1ns/1ps
module prga_valrdy_cdc #(
    parameter AFIFO_DEPTH_LOG2 = 1,
    parameter AFIFO_DATA_WIDTH = 32,
    parameter ASYNC_RST = 0,
    parameter VALRDY_DATA_WIDTH = 32
) (
    // synchronous in `iclk` domain if ~ASYNC_RST
    // Assumption:  once `rst_n` is asserted, it must be held until
    //  `rst_n_echo_wclk` is asserted (see prga_async_fifo_ptr)
    input wire                          rst_n

    input wire                          iclk,
    input wire                          ival,
    output wire                         irdy,
    input wire [VALRDY_DATA_WIDTH-1:0]  idata,

    input wire                          oclk,
    output wire                         oval,
    input wire                          ordy,
    output wire [VALRDY_DATA_WIDTH-1:0] odata
    );

    localparam  NUM_FIFO_DATA_PER_VALRDY_DATA = (VALRDY_DATA_WIDTH / AFIFO_DATA_WIDTH) + (VALRDY_DATA_WIDTH % AFIFO_DATA_WIDTH == 0 ? 0 : 1);
    localparam  LEFTOVER = (NUM_FIFO_DATA_PER_VALRDY_DATA * AFIFO_DATA_WIDTH) - VALRDY_DATA_WIDTH;

    // == Synchronize rst_n in iclk domain ==
    reg rst_n_iclk;

    generate if (ASYNC_RST) begin
        always @(posedge iclk or negedge rst_n) begin
            if (~rst_n) begin
                rst_n_iclk <= 1'b0;
            end else begin
                rst_n_iclk <= 1'b1;
            end
        end
    end else begin
        always @(posedge iclk) begin
            rst_n_iclk <= rst_n;
        end
    end endgenerate

    // == forward declaration ==
    wire                        rst_n_oclk;
    wire                        afifo_full, afifo_empty;
    wire                        i_resizer_empty, o_resizer_rd, o_resizer_empty;
    wire [AFIFO_DATA_WIDTH-1:0] afifo_dout;
    wire [AFIFO_DATA_WIDTH-1:0] i_resizer_dout;
    wire [NUM_FIFO_DATA_PER_VALRDY_DATA * AFIFO_DATA_WIDTH - 1:0] o_resizer_dout;

    // == input resizer ==
    prga_fifo_resizer #(
        .DATA_WIDTH         (AFIFO_DATA_WIDTH)
        ,.INPUT_MULTIPLIER  (NUM_FIFO_DATA_PER_VALRDY_DATA)
        ,.INPUT_LOOKAHEAD   (1)
        ,.OUTPUT_LOOKAHEAD  (1)
    ) i_i_resizer (
        .clk                (iclk)
        ,.rst               (rst_n_iclk)

        ,.empty_i           (~ival)
        ,.rd_i              (irdy)
        ,.dout_i            (LEFTOVER > 0 ? { {LEFTOVER{1'b0}}, idata } : idata)

        ,.empty             (i_resizer_empty)
        ,.rd                (~afifo_full)
        ,.dout              (i_resizer_dout)
        );

    // == ASYNC FIFO ==
    prga_async_fifo #(
        .DEPTH_LOG2         (AFIFO_DEPTH_LOG2)
        ,.DATA_WIDTH        (AFIFO_DATA_WIDTH)
        ,.LOOKAHEAD         (0)
        ,.ASYNC_RST         (0)
    ) i_fifo (
        .rst_n              (rst_n_iclk)
        ,.rst_n_rclk        (rst_n_oclk)
        ,.wclk              (iclk)
        ,.wr                (~i_resizer_empty)
        ,.full              (afifo_full)
        ,.din               (i_resizer_dout)
        ,.rclk              (oclk)
        ,.rd                (o_resizer_rd)
        ,.empty             (afifo_empty)
        ,.dout              (afifo_dout)
        );

    // == output resizer ==
    prga_fifo_resizer #(
        .DATA_WIDTH         (AFIFO_DATA_WIDTH)
        ,.OUTPUT_MULTIPLIER (NUM_FIFO_DATA_PER_VALRDY_DATA)
        ,.INPUT_LOOKAHEAD   (0)
        ,.OUTPUT_LOOKAHEAD  (1)
    ) i_o_resizer (
        .clk                (oclk)
        ,.rst               (rst_n_oclk)

        ,.empty_i           (afifo_empty)
        ,.rd_i              (o_resizer_rd)
        ,.dout_i            (afifo_dout)

        ,.empty             (o_resizer_empty)
        ,.rd                (ordy)
        ,.dout              (o_resizer_dout)
        );

    // == assign outputs ==
    assign oval = ~o_resizer_empty;
    assign odata = o_resizer_dout[0+:VALRDY_DATA_WIDTH];

endmodule
